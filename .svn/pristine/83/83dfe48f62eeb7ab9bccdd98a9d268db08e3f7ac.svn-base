define(['exports', 'react', 'react-dom'], (function (exports, React, reactDom) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var React__namespace = /*#__PURE__*/_interopNamespace(React);
    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

    // Copyright (c) 2012 The Chromium Authors, Vladimirs. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.

    /**
     * focus-outline-manager
     *
     * Watch users keyboard input and manage the focus outline visibility
     */

    /**
     * The class name to set on the document element.
     * @const
     */
    var CLASS_NAME = 'focus-outline-hidden';

    /**
     * This class sets a CSS class name on the HTML element when a user presses the
     * tab key. It removes the class name when the user clicks anywhere.
     *
     * This allows you to write CSS like this:
     *
     * html.focus-outline-hidden *:focus {
     *     outline: none;
     * }
     *
     * And the outline will only be shown if the user uses the keyboard to get to it.
     *
     * @constructor
     */
    function FocusOutlineManager() {
      var that = this;
      document.addEventListener('keydown', function (e) {
        that.focusByKeyboard = true;
      }, true);
      document.addEventListener('mousedown', function (e) {
        that.focusByKeyboard = false;
      }, true);
      document.addEventListener('focus', function (event) {
        // Update visibility only when focus is actually changed.
        that.updateVisibility();
      }, true);
      document.addEventListener('focusout', function (event) {
        window.setTimeout(function () {
          if (!document.hasFocus()) {
            that.focusByKeyboard = true;
            that.updateVisibility();
          }
        }, 0);
      });
      this.updateVisibility();
    }
    FocusOutlineManager.prototype = {
      /**
       * Whether focus change is triggered by TAB key.
       * @type {boolean}
       * @private
       */
      focusByKeyboard: true,
      updateVisibility: function () {
        this.hidden = !this.focusByKeyboard;
      },
      /**
       * Whether the focus outline should be hidden.
       * @type {boolean}
       */
      set hidden(hidden) {
        document.documentElement.classList.toggle(CLASS_NAME, hidden);
      },
      get hidden() {
        return document.documentElement.classList.contains(CLASS_NAME);
      }
    };
    new FocusOutlineManager();

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var classnames = {exports: {}};

    /*!
      Copyright (c) 2018 Jed Watson.
      Licensed under the MIT License (MIT), see
      http://jedwatson.github.io/classnames
    */

    (function (module) {
    	/* global define */

    	(function () {

    	  var hasOwn = {}.hasOwnProperty;
    	  function classNames() {
    	    var classes = [];
    	    for (var i = 0; i < arguments.length; i++) {
    	      var arg = arguments[i];
    	      if (!arg) continue;
    	      var argType = typeof arg;
    	      if (argType === 'string' || argType === 'number') {
    	        classes.push(arg);
    	      } else if (Array.isArray(arg)) {
    	        if (arg.length) {
    	          var inner = classNames.apply(null, arg);
    	          if (inner) {
    	            classes.push(inner);
    	          }
    	        }
    	      } else if (argType === 'object') {
    	        if (arg.toString === Object.prototype.toString) {
    	          for (var key in arg) {
    	            if (hasOwn.call(arg, key) && arg[key]) {
    	              classes.push(key);
    	            }
    	          }
    	        } else {
    	          classes.push(arg.toString());
    	        }
    	      }
    	    }
    	    return classes.join(' ');
    	  }
    	  if (module.exports) {
    	    classNames.default = classNames;
    	    module.exports = classNames;
    	  } else {
    	    window.classNames = classNames;
    	  }
    	})();
    } (classnames));

    var cn = classnames.exports;

    var dist = {exports: {}};

    var scrollSmooth$1 = {exports: {}};

    var tools = {};

    Object.defineProperty(tools, "__esModule", {
      value: true
    });
    var easeFunctions = tools.easeFunctions = {
      linear: function linear(t) {
        return t;
      },
      easeInQuad: function easeInQuad(t) {
        return t * t;
      },
      easeOutQuad: function easeOutQuad(t) {
        return t * (2 - t);
      },
      easeInOutQuad: function easeInOutQuad(t) {
        return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
      },
      easeInCubic: function easeInCubic(t) {
        return t * t * t;
      },
      easeOutCubic: function easeOutCubic(t) {
        return --t * t * t + 1;
      },
      easeInOutCubic: function easeInOutCubic(t) {
        return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      },
      easeInQuart: function easeInQuart(t) {
        return t * t * t * t;
      },
      easeOutQuart: function easeOutQuart(t) {
        return 1 - --t * t * t * t;
      },
      easeInOutQuart: function easeInOutQuart(t) {
        return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
      },
      easeInQuint: function easeInQuint(t) {
        return t * t * t * t * t;
      },
      easeOutQuint: function easeOutQuint(t) {
        return 1 + --t * t * t * t * t;
      },
      easeInOutQuint: function easeInOutQuint(t) {
        return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
      }
    };
    var isNumeric = tools.isNumeric = function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };
    tools.setPosition = function setPosition(begin, end, elapsed, duration) {
      var ease = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'easeInOutCubic';
      return elapsed > duration ? end : begin + (end - begin) * easeFunctions[ease](elapsed / duration);
    };
    tools.calcEndPoint = function calcEndPoint(target) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      if (isNumeric(target)) {
        return parseInt(target) + offset;
      }
      var y = context === window || context === document.documentElement ? window.pageYOffset : context.scrollTop - context.getBoundingClientRect().top;
      var distance = target.nodeName.toLowerCase() === 'html' ? -y : target.getBoundingClientRect().top + y;
      return distance + offset;
    };

    (function (module, exports) {

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    	  return typeof obj;
    	} : function (obj) {
    	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    	};
    	var _tools = tools;
    	exports.default = function (target) {
    	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    	    _ref$duration = _ref.duration,
    	    duration = _ref$duration === undefined ? 500 : _ref$duration,
    	    _ref$context = _ref.context,
    	    context = _ref$context === undefined ? window : _ref$context,
    	    _ref$offset = _ref.offset,
    	    offset = _ref$offset === undefined ? 0 : _ref$offset,
    	    _ref$ease = _ref.ease,
    	    ease = _ref$ease === undefined ? "easeInOutCubic" : _ref$ease,
    	    callback = _ref.callback;
    	  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== "object") return;
    	  var start = context.scrollTop !== null && context.scrollTop !== undefined ? context.scrollTop : window.pageYOffset;
    	  var end = (0, _tools.calcEndPoint)(target, context, offset);
    	  var clock = performance.now();
    	  var rAF = window.requestAnimationFrame;
    	  var tick = function tick() {
    	    var elapsed = performance.now() - clock;
    	    var pos = (0, _tools.setPosition)(start, end, elapsed, duration, ease);
    	    if (context !== window) {
    	      context.scrollTop = pos;
    	    } else {
    	      window.scroll(0, pos);
    	    }
    	    if (elapsed > duration) {
    	      typeof callback === "function" && callback(target);
    	    } else {
    	      rAF(tick);
    	    }
    	  };
    	  tick();
    	};
    	module.exports = exports["default"];
    } (scrollSmooth$1, scrollSmooth$1.exports));

    var anchorScroll = {exports: {}};

    (function (module, exports) {

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	var _extends = Object.assign || function (target) {
    	  for (var i = 1; i < arguments.length; i++) {
    	    var source = arguments[i];
    	    for (var key in source) {
    	      if (Object.prototype.hasOwnProperty.call(source, key)) {
    	        target[key] = source[key];
    	      }
    	    }
    	  }
    	  return target;
    	};
    	var _scrollSmooth = scrollSmooth$1.exports;
    	var _scrollSmooth2 = _interopRequireDefault(_scrollSmooth);
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    default: obj
    	  };
    	}
    	exports.default = function () {
    	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    	    _ref$query = _ref.query,
    	    query = _ref$query === undefined ? '[href^="#"]:not([href="#"]' : _ref$query,
    	    _ref$match = _ref.match,
    	    match = _ref$match === undefined ? function (target) {
    	      return document.getElementById(target.hash.substring(1));
    	    } : _ref$match,
    	    _ref$hashChange = _ref.hashChange,
    	    hashChange = _ref$hashChange === undefined ? true : _ref$hashChange,
    	    scrollSmoothConfig = _ref.scrollSmoothConfig;
    	  var links = document.querySelectorAll(query);
    	  var handler = function handler(e) {
    	    e.preventDefault();
    	    var dest = match(e.target);
    	    if (!dest) return;
    	    if (hashChange) {
    	      history.replaceState(null, null, '#' + dest.id);
    	    }
    	    (0, _scrollSmooth2.default)(dest, _extends({}, scrollSmoothConfig));
    	  };
    	  Array.from(links).map(function (link) {
    	    link.addEventListener('click', handler, false);
    	  });
    	};
    	module.exports = exports['default'];
    } (anchorScroll, anchorScroll.exports));

    var observe = {exports: {}};

    (function (module, exports) {

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	function _toConsumableArray(arr) {
    	  if (Array.isArray(arr)) {
    	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
    	      arr2[i] = arr[i];
    	    }
    	    return arr2;
    	  } else {
    	    return Array.from(arr);
    	  }
    	}
    	exports.default = function () {
    	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    	    _ref$activeClass = _ref.activeClass,
    	    activeClass = _ref$activeClass === undefined ? 'active' : _ref$activeClass,
    	    _ref$query = _ref.query,
    	    query = _ref$query === undefined ? '[href^="#"]:not([href="#"]):not([href="#0"])' : _ref$query,
    	    _ref$threshold = _ref.threshold,
    	    threshold = _ref$threshold === undefined ? [0.25, 0.5, 0.75] : _ref$threshold,
    	    _ref$detectType = _ref.detectType,
    	    detectType = _ref$detectType === undefined ? 'max' : _ref$detectType;
    	  var options = {
    	    threshold: threshold
    	  };
    	  var removeClass = function removeClass(node) {
    	    return node.classList.remove(activeClass);
    	  };
    	  var addClass = function addClass(node) {
    	    return node.classList.add(activeClass);
    	  };
    	  var unsetAllActives = function unsetAllActives() {
    	    document.querySelectorAll('.' + activeClass).forEach(removeClass);
    	  };
    	  var setActive = function setActive(activeNode) {
    	    unsetAllActives();
    	    addClass(document.querySelector('a[href="#' + activeNode.id + '"]'));
    	  };
    	  var callback = function callback(entries) {
    	    entries.forEach(function (entry) {
    	      if (entry.intersectionRatio >= Math[detectType].apply(Math, _toConsumableArray(threshold))) {
    	        setActive(entry.target);
    	      }
    	    });
    	  };
    	  var links = document.querySelectorAll(query);
    	  var observer = new IntersectionObserver(callback, options);
    	  var observeTarget = function observeTarget(link) {
    	    var target = document.querySelector('#' + link.hash.slice(1));
    	    observer.observe(target);
    	  };
    	  links.forEach(observeTarget);
    	};
    	module.exports = exports['default'];
    } (observe, observe.exports));

    (function (module, exports) {

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	var _scrollSmooth = scrollSmooth$1.exports;
    	var _scrollSmooth2 = _interopRequireDefault(_scrollSmooth);
    	var _tools = tools;
    	var _anchorScroll = anchorScroll.exports;
    	var _anchorScroll2 = _interopRequireDefault(_anchorScroll);
    	var _observe = observe.exports;
    	var _observe2 = _interopRequireDefault(_observe);
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    default: obj
    	  };
    	}
    	exports.default = {
    	  to: _scrollSmooth2.default,
    	  calcEndPoint: _tools.calcEndPoint,
    	  anchorScroll: _anchorScroll2.default,
    	  observe: _observe2.default
    	};
    	module.exports = exports['default'];
    } (dist, dist.exports));

    var scrollSmooth = /*@__PURE__*/getDefaultExportFromCjs(dist.exports);

    var scrollparent = {exports: {}};

    (function (module) {
    	(function (root, factory) {
    	  if (module.exports) {
    	    module.exports = factory();
    	  } else {
    	    root.Scrollparent = factory();
    	  }
    	})(commonjsGlobal, function () {
    	  var regex = /(auto|scroll)/;
    	  var parents = function (node, ps) {
    	    if (node.parentNode === null) {
    	      return ps;
    	    }
    	    return parents(node.parentNode, ps.concat([node]));
    	  };
    	  var style = function (node, prop) {
    	    return getComputedStyle(node, null).getPropertyValue(prop);
    	  };
    	  var overflow = function (node) {
    	    return style(node, "overflow") + style(node, "overflow-y") + style(node, "overflow-x");
    	  };
    	  var scroll = function (node) {
    	    return regex.test(overflow(node));
    	  };
    	  var scrollParent = function (node) {
    	    if (!(node instanceof HTMLElement || node instanceof SVGElement)) {
    	      return;
    	    }
    	    var ps = parents(node.parentNode, []);
    	    for (var i = 0; i < ps.length; i += 1) {
    	      if (scroll(ps[i])) {
    	        return ps[i];
    	      }
    	    }
    	    return document.scrollingElement || document.documentElement;
    	  };
    	  return scrollParent;
    	});
    } (scrollparent));

    var Scrollparent = scrollparent.exports;

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
      nativeMin = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function () {
      return root.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs,
          thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }
      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }
      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(),
          isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    var lodash_debounce = debounce;

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }

    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }

    var propTypes$3 = {exports: {}};

    var reactIs$4 = {exports: {}};

    var reactIs_development$3 = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var hasRequiredReactIs_development$3;

    function requireReactIs_development$3 () {
    	if (hasRequiredReactIs_development$3) return reactIs_development$3;
    	hasRequiredReactIs_development$3 = 1;

    	{
    	  (function () {

    	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    	    // nor polyfill, then a plain number is used for performance.
    	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    	    // (unstable) APIs that have been removed. Can we remove the symbols?

    	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    	    function isValidElementType(type) {
    	      return typeof type === 'string' || typeof type === 'function' ||
    	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    	    }
    	    function typeOf(object) {
    	      if (typeof object === 'object' && object !== null) {
    	        var $$typeof = object.$$typeof;
    	        switch ($$typeof) {
    	          case REACT_ELEMENT_TYPE:
    	            var type = object.type;
    	            switch (type) {
    	              case REACT_ASYNC_MODE_TYPE:
    	              case REACT_CONCURRENT_MODE_TYPE:
    	              case REACT_FRAGMENT_TYPE:
    	              case REACT_PROFILER_TYPE:
    	              case REACT_STRICT_MODE_TYPE:
    	              case REACT_SUSPENSE_TYPE:
    	                return type;
    	              default:
    	                var $$typeofType = type && type.$$typeof;
    	                switch ($$typeofType) {
    	                  case REACT_CONTEXT_TYPE:
    	                  case REACT_FORWARD_REF_TYPE:
    	                  case REACT_LAZY_TYPE:
    	                  case REACT_MEMO_TYPE:
    	                  case REACT_PROVIDER_TYPE:
    	                    return $$typeofType;
    	                  default:
    	                    return $$typeof;
    	                }
    	            }
    	          case REACT_PORTAL_TYPE:
    	            return $$typeof;
    	        }
    	      }
    	      return undefined;
    	    } // AsyncMode is deprecated along with isAsyncMode

    	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    	    var ContextConsumer = REACT_CONTEXT_TYPE;
    	    var ContextProvider = REACT_PROVIDER_TYPE;
    	    var Element = REACT_ELEMENT_TYPE;
    	    var ForwardRef = REACT_FORWARD_REF_TYPE;
    	    var Fragment = REACT_FRAGMENT_TYPE;
    	    var Lazy = REACT_LAZY_TYPE;
    	    var Memo = REACT_MEMO_TYPE;
    	    var Portal = REACT_PORTAL_TYPE;
    	    var Profiler = REACT_PROFILER_TYPE;
    	    var StrictMode = REACT_STRICT_MODE_TYPE;
    	    var Suspense = REACT_SUSPENSE_TYPE;
    	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    	    function isAsyncMode(object) {
    	      {
    	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
    	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

    	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    	        }
    	      }
    	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    	    }
    	    function isConcurrentMode(object) {
    	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    	    }
    	    function isContextConsumer(object) {
    	      return typeOf(object) === REACT_CONTEXT_TYPE;
    	    }
    	    function isContextProvider(object) {
    	      return typeOf(object) === REACT_PROVIDER_TYPE;
    	    }
    	    function isElement(object) {
    	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    	    }
    	    function isForwardRef(object) {
    	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    	    }
    	    function isFragment(object) {
    	      return typeOf(object) === REACT_FRAGMENT_TYPE;
    	    }
    	    function isLazy(object) {
    	      return typeOf(object) === REACT_LAZY_TYPE;
    	    }
    	    function isMemo(object) {
    	      return typeOf(object) === REACT_MEMO_TYPE;
    	    }
    	    function isPortal(object) {
    	      return typeOf(object) === REACT_PORTAL_TYPE;
    	    }
    	    function isProfiler(object) {
    	      return typeOf(object) === REACT_PROFILER_TYPE;
    	    }
    	    function isStrictMode(object) {
    	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    	    }
    	    function isSuspense(object) {
    	      return typeOf(object) === REACT_SUSPENSE_TYPE;
    	    }
    	    reactIs_development$3.AsyncMode = AsyncMode;
    	    reactIs_development$3.ConcurrentMode = ConcurrentMode;
    	    reactIs_development$3.ContextConsumer = ContextConsumer;
    	    reactIs_development$3.ContextProvider = ContextProvider;
    	    reactIs_development$3.Element = Element;
    	    reactIs_development$3.ForwardRef = ForwardRef;
    	    reactIs_development$3.Fragment = Fragment;
    	    reactIs_development$3.Lazy = Lazy;
    	    reactIs_development$3.Memo = Memo;
    	    reactIs_development$3.Portal = Portal;
    	    reactIs_development$3.Profiler = Profiler;
    	    reactIs_development$3.StrictMode = StrictMode;
    	    reactIs_development$3.Suspense = Suspense;
    	    reactIs_development$3.isAsyncMode = isAsyncMode;
    	    reactIs_development$3.isConcurrentMode = isConcurrentMode;
    	    reactIs_development$3.isContextConsumer = isContextConsumer;
    	    reactIs_development$3.isContextProvider = isContextProvider;
    	    reactIs_development$3.isElement = isElement;
    	    reactIs_development$3.isForwardRef = isForwardRef;
    	    reactIs_development$3.isFragment = isFragment;
    	    reactIs_development$3.isLazy = isLazy;
    	    reactIs_development$3.isMemo = isMemo;
    	    reactIs_development$3.isPortal = isPortal;
    	    reactIs_development$3.isProfiler = isProfiler;
    	    reactIs_development$3.isStrictMode = isStrictMode;
    	    reactIs_development$3.isSuspense = isSuspense;
    	    reactIs_development$3.isValidElementType = isValidElementType;
    	    reactIs_development$3.typeOf = typeOf;
    	  })();
    	}
    	return reactIs_development$3;
    }

    var hasRequiredReactIs$1;

    function requireReactIs$1 () {
    	if (hasRequiredReactIs$1) return reactIs$4.exports;
    	hasRequiredReactIs$1 = 1;
    	(function (module) {

    		{
    		  module.exports = requireReactIs_development$3();
    		}
    } (reactIs$4));
    	return reactIs$4.exports;
    }

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */

    var objectAssign;
    var hasRequiredObjectAssign;

    function requireObjectAssign () {
    	if (hasRequiredObjectAssign) return objectAssign;
    	hasRequiredObjectAssign = 1;

    	/* eslint-disable no-unused-vars */
    	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    	var hasOwnProperty = Object.prototype.hasOwnProperty;
    	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    	function toObject(val) {
    	  if (val === null || val === undefined) {
    	    throw new TypeError('Object.assign cannot be called with null or undefined');
    	  }
    	  return Object(val);
    	}
    	function shouldUseNative() {
    	  try {
    	    if (!Object.assign) {
    	      return false;
    	    }

    	    // Detect buggy property enumeration order in older V8 versions.

    	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    	    test1[5] = 'de';
    	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
    	      return false;
    	    }

    	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    	    var test2 = {};
    	    for (var i = 0; i < 10; i++) {
    	      test2['_' + String.fromCharCode(i)] = i;
    	    }
    	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    	      return test2[n];
    	    });
    	    if (order2.join('') !== '0123456789') {
    	      return false;
    	    }

    	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    	    var test3 = {};
    	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    	      test3[letter] = letter;
    	    });
    	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
    	      return false;
    	    }
    	    return true;
    	  } catch (err) {
    	    // We don't expect any of the above to throw, but better to be safe.
    	    return false;
    	  }
    	}
    	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	  var from;
    	  var to = toObject(target);
    	  var symbols;
    	  for (var s = 1; s < arguments.length; s++) {
    	    from = Object(arguments[s]);
    	    for (var key in from) {
    	      if (hasOwnProperty.call(from, key)) {
    	        to[key] = from[key];
    	      }
    	    }
    	    if (getOwnPropertySymbols) {
    	      symbols = getOwnPropertySymbols(from);
    	      for (var i = 0; i < symbols.length; i++) {
    	        if (propIsEnumerable.call(from, symbols[i])) {
    	          to[symbols[i]] = from[symbols[i]];
    	        }
    	      }
    	    }
    	  }
    	  return to;
    	};
    	return objectAssign;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret_1$1;
    var hasRequiredReactPropTypesSecret$1;

    function requireReactPropTypesSecret$1 () {
    	if (hasRequiredReactPropTypesSecret$1) return ReactPropTypesSecret_1$1;
    	hasRequiredReactPropTypesSecret$1 = 1;

    	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    	ReactPropTypesSecret_1$1 = ReactPropTypesSecret;
    	return ReactPropTypesSecret_1$1;
    }

    var has;
    var hasRequiredHas;

    function requireHas () {
    	if (hasRequiredHas) return has;
    	hasRequiredHas = 1;
    	has = Function.call.bind(Object.prototype.hasOwnProperty);
    	return has;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var checkPropTypes_1$1;
    var hasRequiredCheckPropTypes$1;

    function requireCheckPropTypes$1 () {
    	if (hasRequiredCheckPropTypes$1) return checkPropTypes_1$1;
    	hasRequiredCheckPropTypes$1 = 1;

    	var printWarning = function () {};
    	{
    	  var ReactPropTypesSecret = requireReactPropTypesSecret$1();
    	  var loggedTypeFailures = {};
    	  var has = requireHas();
    	  printWarning = function (text) {
    	    var message = 'Warning: ' + text;
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {/**/}
    	  };
    	}

    	/**
    	 * Assert that the values match with the type specs.
    	 * Error messages are memorized and will only be shown once.
    	 *
    	 * @param {object} typeSpecs Map of name to a ReactPropType
    	 * @param {object} values Runtime values that need to be type-checked
    	 * @param {string} location e.g. "prop", "context", "child context"
    	 * @param {string} componentName Name of the component for error messages.
    	 * @param {?Function} getStack Returns the component stack.
    	 * @private
    	 */
    	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    	  {
    	    for (var typeSpecName in typeSpecs) {
    	      if (has(typeSpecs, typeSpecName)) {
    	        var error;
    	        // Prop type validation may throw. In case they do, we don't want to
    	        // fail the render phase where it didn't fail before. So we log it.
    	        // After these have been cleaned up, we'll let them throw.
    	        try {
    	          // This is intentionally an invariant that gets caught. It's the same
    	          // behavior as without this statement except with a better message.
    	          if (typeof typeSpecs[typeSpecName] !== 'function') {
    	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
    	            err.name = 'Invariant Violation';
    	            throw err;
    	          }
    	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
    	        } catch (ex) {
    	          error = ex;
    	        }
    	        if (error && !(error instanceof Error)) {
    	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
    	        }
    	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
    	          // Only monitor this failure once because there tends to be a lot of the
    	          // same error.
    	          loggedTypeFailures[error.message] = true;
    	          var stack = getStack ? getStack() : '';
    	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
    	        }
    	      }
    	    }
    	  }
    	}

    	/**
    	 * Resets warning cache when testing.
    	 *
    	 * @private
    	 */
    	checkPropTypes.resetWarningCache = function () {
    	  {
    	    loggedTypeFailures = {};
    	  }
    	};
    	checkPropTypes_1$1 = checkPropTypes;
    	return checkPropTypes_1$1;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var factoryWithTypeCheckers$1;
    var hasRequiredFactoryWithTypeCheckers$1;

    function requireFactoryWithTypeCheckers$1 () {
    	if (hasRequiredFactoryWithTypeCheckers$1) return factoryWithTypeCheckers$1;
    	hasRequiredFactoryWithTypeCheckers$1 = 1;

    	var ReactIs = requireReactIs$1();
    	var assign = requireObjectAssign();
    	var ReactPropTypesSecret = requireReactPropTypesSecret$1();
    	var has = requireHas();
    	var checkPropTypes = requireCheckPropTypes$1();
    	var printWarning = function () {};
    	{
    	  printWarning = function (text) {
    	    var message = 'Warning: ' + text;
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {}
    	  };
    	}
    	function emptyFunctionThatReturnsNull() {
    	  return null;
    	}
    	factoryWithTypeCheckers$1 = function (isValidElement, throwOnDirectAccess) {
    	  /* global Symbol */
    	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    	  /**
    	   * Returns the iterator method function contained on the iterable object.
    	   *
    	   * Be sure to invoke the function with the iterable as context:
    	   *
    	   *     var iteratorFn = getIteratorFn(myIterable);
    	   *     if (iteratorFn) {
    	   *       var iterator = iteratorFn.call(myIterable);
    	   *       ...
    	   *     }
    	   *
    	   * @param {?object} maybeIterable
    	   * @return {?function}
    	   */
    	  function getIteratorFn(maybeIterable) {
    	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    	    if (typeof iteratorFn === 'function') {
    	      return iteratorFn;
    	    }
    	  }

    	  /**
    	   * Collection of methods that allow declaration and validation of props that are
    	   * supplied to React components. Example usage:
    	   *
    	   *   var Props = require('ReactPropTypes');
    	   *   var MyArticle = React.createClass({
    	   *     propTypes: {
    	   *       // An optional string prop named "description".
    	   *       description: Props.string,
    	   *
    	   *       // A required enum prop named "category".
    	   *       category: Props.oneOf(['News','Photos']).isRequired,
    	   *
    	   *       // A prop named "dialog" that requires an instance of Dialog.
    	   *       dialog: Props.instanceOf(Dialog).isRequired
    	   *     },
    	   *     render: function() { ... }
    	   *   });
    	   *
    	   * A more formal specification of how these methods are used:
    	   *
    	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
    	   *   decl := ReactPropTypes.{type}(.isRequired)?
    	   *
    	   * Each and every declaration produces a function with the same signature. This
    	   * allows the creation of custom validation functions. For example:
    	   *
    	   *  var MyLink = React.createClass({
    	   *    propTypes: {
    	   *      // An optional string or URI prop named "href".
    	   *      href: function(props, propName, componentName) {
    	   *        var propValue = props[propName];
    	   *        if (propValue != null && typeof propValue !== 'string' &&
    	   *            !(propValue instanceof URI)) {
    	   *          return new Error(
    	   *            'Expected a string or an URI for ' + propName + ' in ' +
    	   *            componentName
    	   *          );
    	   *        }
    	   *      }
    	   *    },
    	   *    render: function() {...}
    	   *  });
    	   *
    	   * @internal
    	   */

    	  var ANONYMOUS = '<<anonymous>>';

    	  // Important!
    	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    	  var ReactPropTypes = {
    	    array: createPrimitiveTypeChecker('array'),
    	    bigint: createPrimitiveTypeChecker('bigint'),
    	    bool: createPrimitiveTypeChecker('boolean'),
    	    func: createPrimitiveTypeChecker('function'),
    	    number: createPrimitiveTypeChecker('number'),
    	    object: createPrimitiveTypeChecker('object'),
    	    string: createPrimitiveTypeChecker('string'),
    	    symbol: createPrimitiveTypeChecker('symbol'),
    	    any: createAnyTypeChecker(),
    	    arrayOf: createArrayOfTypeChecker,
    	    element: createElementTypeChecker(),
    	    elementType: createElementTypeTypeChecker(),
    	    instanceOf: createInstanceTypeChecker,
    	    node: createNodeChecker(),
    	    objectOf: createObjectOfTypeChecker,
    	    oneOf: createEnumTypeChecker,
    	    oneOfType: createUnionTypeChecker,
    	    shape: createShapeTypeChecker,
    	    exact: createStrictShapeTypeChecker
    	  };

    	  /**
    	   * inlined Object.is polyfill to avoid requiring consumers ship their own
    	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    	   */
    	  /*eslint-disable no-self-compare*/
    	  function is(x, y) {
    	    // SameValue algorithm
    	    if (x === y) {
    	      // Steps 1-5, 7-10
    	      // Steps 6.b-6.e: +0 != -0
    	      return x !== 0 || 1 / x === 1 / y;
    	    } else {
    	      // Step 6.a: NaN == NaN
    	      return x !== x && y !== y;
    	    }
    	  }
    	  /*eslint-enable no-self-compare*/

    	  /**
    	   * We use an Error-like object for backward compatibility as people may call
    	   * PropTypes directly and inspect their output. However, we don't use real
    	   * Errors anymore. We don't inspect their stack anyway, and creating them
    	   * is prohibitively expensive if they are created too often, such as what
    	   * happens in oneOfType() for any type before the one that matched.
    	   */
    	  function PropTypeError(message, data) {
    	    this.message = message;
    	    this.data = data && typeof data === 'object' ? data : {};
    	    this.stack = '';
    	  }
    	  // Make `instanceof Error` still work for returned errors.
    	  PropTypeError.prototype = Error.prototype;
    	  function createChainableTypeChecker(validate) {
    	    {
    	      var manualPropTypeCallCache = {};
    	      var manualPropTypeWarningCount = 0;
    	    }
    	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    	      componentName = componentName || ANONYMOUS;
    	      propFullName = propFullName || propName;
    	      if (secret !== ReactPropTypesSecret) {
    	        if (throwOnDirectAccess) {
    	          // New behavior only for users of `prop-types` package
    	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    	          err.name = 'Invariant Violation';
    	          throw err;
    	        } else if (typeof console !== 'undefined') {
    	          // Old behavior for people using React.PropTypes
    	          var cacheKey = componentName + ':' + propName;
    	          if (!manualPropTypeCallCache[cacheKey] &&
    	          // Avoid spamming the console because they are often not actionable except for lib authors
    	          manualPropTypeWarningCount < 3) {
    	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
    	            manualPropTypeCallCache[cacheKey] = true;
    	            manualPropTypeWarningCount++;
    	          }
    	        }
    	      }
    	      if (props[propName] == null) {
    	        if (isRequired) {
    	          if (props[propName] === null) {
    	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
    	          }
    	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
    	        }
    	        return null;
    	      } else {
    	        return validate(props, propName, componentName, location, propFullName);
    	      }
    	    }
    	    var chainedCheckType = checkType.bind(null, false);
    	    chainedCheckType.isRequired = checkType.bind(null, true);
    	    return chainedCheckType;
    	  }
    	  function createPrimitiveTypeChecker(expectedType) {
    	    function validate(props, propName, componentName, location, propFullName, secret) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== expectedType) {
    	        // `propValue` being instance of, say, date/regexp, pass the 'object'
    	        // check, but we can offer a more precise error message here rather than
    	        // 'of type `object`'.
    	        var preciseType = getPreciseType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
    	          expectedType: expectedType
    	        });
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createAnyTypeChecker() {
    	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    	  }
    	  function createArrayOfTypeChecker(typeChecker) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (typeof typeChecker !== 'function') {
    	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    	      }
    	      var propValue = props[propName];
    	      if (!Array.isArray(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    	      }
    	      for (var i = 0; i < propValue.length; i++) {
    	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
    	        if (error instanceof Error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createElementTypeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      if (!isValidElement(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createElementTypeTypeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      if (!ReactIs.isValidElementType(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createInstanceTypeChecker(expectedClass) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (!(props[propName] instanceof expectedClass)) {
    	        var expectedClassName = expectedClass.name || ANONYMOUS;
    	        var actualClassName = getClassName(props[propName]);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createEnumTypeChecker(expectedValues) {
    	    if (!Array.isArray(expectedValues)) {
    	      {
    	        if (arguments.length > 1) {
    	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
    	        } else {
    	          printWarning('Invalid argument supplied to oneOf, expected an array.');
    	        }
    	      }
    	      return emptyFunctionThatReturnsNull;
    	    }
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      for (var i = 0; i < expectedValues.length; i++) {
    	        if (is(propValue, expectedValues[i])) {
    	          return null;
    	        }
    	      }
    	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
    	        var type = getPreciseType(value);
    	        if (type === 'symbol') {
    	          return String(value);
    	        }
    	        return value;
    	      });
    	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createObjectOfTypeChecker(typeChecker) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (typeof typeChecker !== 'function') {
    	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    	      }
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    	      }
    	      for (var key in propValue) {
    	        if (has(propValue, key)) {
    	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	          if (error instanceof Error) {
    	            return error;
    	          }
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createUnionTypeChecker(arrayOfTypeCheckers) {
    	    if (!Array.isArray(arrayOfTypeCheckers)) {
    	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
    	      return emptyFunctionThatReturnsNull;
    	    }
    	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
    	      var checker = arrayOfTypeCheckers[i];
    	      if (typeof checker !== 'function') {
    	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
    	        return emptyFunctionThatReturnsNull;
    	      }
    	    }
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var expectedTypes = [];
    	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
    	        var checker = arrayOfTypeCheckers[i];
    	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
    	        if (checkerResult == null) {
    	          return null;
    	        }
    	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
    	          expectedTypes.push(checkerResult.data.expectedType);
    	        }
    	      }
    	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
    	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createNodeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (!isNode(props[propName])) {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function invalidValidatorError(componentName, location, propFullName, key, type) {
    	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    	  }
    	  function createShapeTypeChecker(shapeTypes) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    	      }
    	      for (var key in shapeTypes) {
    	        var checker = shapeTypes[key];
    	        if (typeof checker !== 'function') {
    	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
    	        }
    	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	        if (error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createStrictShapeTypeChecker(shapeTypes) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    	      }
    	      // We need to check all keys in case some are required but missing from props.
    	      var allKeys = assign({}, props[propName], shapeTypes);
    	      for (var key in allKeys) {
    	        var checker = shapeTypes[key];
    	        if (has(shapeTypes, key) && typeof checker !== 'function') {
    	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
    	        }
    	        if (!checker) {
    	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
    	        }
    	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	        if (error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function isNode(propValue) {
    	    switch (typeof propValue) {
    	      case 'number':
    	      case 'string':
    	      case 'undefined':
    	        return true;
    	      case 'boolean':
    	        return !propValue;
    	      case 'object':
    	        if (Array.isArray(propValue)) {
    	          return propValue.every(isNode);
    	        }
    	        if (propValue === null || isValidElement(propValue)) {
    	          return true;
    	        }
    	        var iteratorFn = getIteratorFn(propValue);
    	        if (iteratorFn) {
    	          var iterator = iteratorFn.call(propValue);
    	          var step;
    	          if (iteratorFn !== propValue.entries) {
    	            while (!(step = iterator.next()).done) {
    	              if (!isNode(step.value)) {
    	                return false;
    	              }
    	            }
    	          } else {
    	            // Iterator will provide entry [k,v] tuples rather than values.
    	            while (!(step = iterator.next()).done) {
    	              var entry = step.value;
    	              if (entry) {
    	                if (!isNode(entry[1])) {
    	                  return false;
    	                }
    	              }
    	            }
    	          }
    	        } else {
    	          return false;
    	        }
    	        return true;
    	      default:
    	        return false;
    	    }
    	  }
    	  function isSymbol(propType, propValue) {
    	    // Native Symbol.
    	    if (propType === 'symbol') {
    	      return true;
    	    }

    	    // falsy value can't be a Symbol
    	    if (!propValue) {
    	      return false;
    	    }

    	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    	    if (propValue['@@toStringTag'] === 'Symbol') {
    	      return true;
    	    }

    	    // Fallback for non-spec compliant Symbols which are polyfilled.
    	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    	      return true;
    	    }
    	    return false;
    	  }

    	  // Equivalent of `typeof` but with special handling for array and regexp.
    	  function getPropType(propValue) {
    	    var propType = typeof propValue;
    	    if (Array.isArray(propValue)) {
    	      return 'array';
    	    }
    	    if (propValue instanceof RegExp) {
    	      // Old webkits (at least until Android 4.0) return 'function' rather than
    	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    	      // passes PropTypes.object.
    	      return 'object';
    	    }
    	    if (isSymbol(propType, propValue)) {
    	      return 'symbol';
    	    }
    	    return propType;
    	  }

    	  // This handles more types than `getPropType`. Only used for error messages.
    	  // See `createPrimitiveTypeChecker`.
    	  function getPreciseType(propValue) {
    	    if (typeof propValue === 'undefined' || propValue === null) {
    	      return '' + propValue;
    	    }
    	    var propType = getPropType(propValue);
    	    if (propType === 'object') {
    	      if (propValue instanceof Date) {
    	        return 'date';
    	      } else if (propValue instanceof RegExp) {
    	        return 'regexp';
    	      }
    	    }
    	    return propType;
    	  }

    	  // Returns a string that is postfixed to a warning about an invalid type.
    	  // For example, "undefined" or "of type array"
    	  function getPostfixForTypeWarning(value) {
    	    var type = getPreciseType(value);
    	    switch (type) {
    	      case 'array':
    	      case 'object':
    	        return 'an ' + type;
    	      case 'boolean':
    	      case 'date':
    	      case 'regexp':
    	        return 'a ' + type;
    	      default:
    	        return type;
    	    }
    	  }

    	  // Returns class name of the object, if any.
    	  function getClassName(propValue) {
    	    if (!propValue.constructor || !propValue.constructor.name) {
    	      return ANONYMOUS;
    	    }
    	    return propValue.constructor.name;
    	  }
    	  ReactPropTypes.checkPropTypes = checkPropTypes;
    	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    	  ReactPropTypes.PropTypes = ReactPropTypes;
    	  return ReactPropTypes;
    	};
    	return factoryWithTypeCheckers$1;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      var ReactIs$1 = requireReactIs$1();

      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess$1 = true;
      propTypes$3.exports = requireFactoryWithTypeCheckers$1()(ReactIs$1.isElement, throwOnDirectAccess$1);
    }

    var FOCUS_GROUP = 'data-focus-lock';
    var FOCUS_DISABLED = 'data-focus-lock-disabled';
    var FOCUS_ALLOW = 'data-no-focus-lock';
    var FOCUS_AUTO = 'data-autofocus-inside';

    /**
     * Assigns a value for a given ref, no matter of the ref format
     * @param {RefObject} ref - a callback function or ref object
     * @param value - a new value
     *
     * @see https://github.com/theKashey/use-callback-ref#assignref
     * @example
     * const refObject = useRef();
     * const refFn = (ref) => {....}
     *
     * assignRef(refObject, "refValue");
     * assignRef(refFn, "refValue");
     */
    function assignRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
      return ref;
    }

    /**
     * creates a MutableRef with ref change callback
     * @param initialValue - initial ref value
     * @param {Function} callback - a callback to run when value changes
     *
     * @example
     * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
     * ref.current = 1;
     * // prints 0 -> 1
     *
     * @see https://reactjs.org/docs/hooks-reference.html#useref
     * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
     * @returns {MutableRefObject}
     */
    function useCallbackRef(initialValue, callback) {
      var ref = React.useState(function () {
        return {
          // value
          value: initialValue,
          // last callback
          callback: callback,
          // "memoized" public interface
          facade: {
            get current() {
              return ref.value;
            },
            set current(value) {
              var last = ref.value;
              if (last !== value) {
                ref.value = value;
                ref.callback(value, last);
              }
            }
          }
        };
      })[0];
      // update callback
      ref.callback = callback;
      return ref.facade;
    }

    var currentValues = new WeakMap();
    /**
     * Merges two or more refs together providing a single interface to set their value
     * @param {RefObject|Ref} refs
     * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
     *
     * @see {@link mergeRefs} a version without buit-in memoization
     * @see https://github.com/theKashey/use-callback-ref#usemergerefs
     * @example
     * const Component = React.forwardRef((props, ref) => {
     *   const ownRef = useRef();
     *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
     *   return <div ref={domRef}>...</div>
     * }
     */
    function useMergeRefs(refs, defaultValue) {
      var callbackRef = useCallbackRef(defaultValue || null, function (newValue) {
        return refs.forEach(function (ref) {
          return assignRef(ref, newValue);
        });
      });
      // handle refs changes - added or removed
      React__namespace.useLayoutEffect(function () {
        var oldValue = currentValues.get(callbackRef);
        if (oldValue) {
          var prevRefs_1 = new Set(oldValue);
          var nextRefs_1 = new Set(refs);
          var current_1 = callbackRef.current;
          prevRefs_1.forEach(function (ref) {
            if (!nextRefs_1.has(ref)) {
              assignRef(ref, null);
            }
          });
          nextRefs_1.forEach(function (ref) {
            if (!prevRefs_1.has(ref)) {
              assignRef(ref, current_1);
            }
          });
        }
        currentValues.set(callbackRef, refs);
      }, [refs]);
      return callbackRef;
    }

    var hiddenGuard = {
      width: '1px',
      height: '0px',
      padding: 0,
      overflow: 'hidden',
      position: 'fixed',
      top: '1px',
      left: '1px'
    };
    ({
      children: propTypes$3.exports.node
    }) ;

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var __assign = function () {
      __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    function ItoI(a) {
      return a;
    }
    function innerCreateMedium(defaults, middleware) {
      if (middleware === void 0) {
        middleware = ItoI;
      }
      var buffer = [];
      var assigned = false;
      var medium = {
        read: function () {
          if (assigned) {
            throw new Error('Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.');
          }
          if (buffer.length) {
            return buffer[buffer.length - 1];
          }
          return defaults;
        },
        useMedium: function (data) {
          var item = middleware(data, assigned);
          buffer.push(item);
          return function () {
            buffer = buffer.filter(function (x) {
              return x !== item;
            });
          };
        },
        assignSyncMedium: function (cb) {
          assigned = true;
          while (buffer.length) {
            var cbs = buffer;
            buffer = [];
            cbs.forEach(cb);
          }
          buffer = {
            push: function (x) {
              return cb(x);
            },
            filter: function () {
              return buffer;
            }
          };
        },
        assignMedium: function (cb) {
          assigned = true;
          var pendingQueue = [];
          if (buffer.length) {
            var cbs = buffer;
            buffer = [];
            cbs.forEach(cb);
            pendingQueue = buffer;
          }
          var executeQueue = function () {
            var cbs = pendingQueue;
            pendingQueue = [];
            cbs.forEach(cb);
          };
          var cycle = function () {
            return Promise.resolve().then(executeQueue);
          };
          cycle();
          buffer = {
            push: function (x) {
              pendingQueue.push(x);
              cycle();
            },
            filter: function (filter) {
              pendingQueue = pendingQueue.filter(filter);
              return buffer;
            }
          };
        }
      };
      return medium;
    }
    function createMedium(defaults, middleware) {
      if (middleware === void 0) {
        middleware = ItoI;
      }
      return innerCreateMedium(defaults, middleware);
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    function createSidecarMedium(options) {
      if (options === void 0) {
        options = {};
      }
      var medium = innerCreateMedium(null);
      medium.options = __assign({
        async: true,
        ssr: false
      }, options);
      return medium;
    }

    var mediumFocus = createMedium({}, function (_ref) {
      var target = _ref.target,
        currentTarget = _ref.currentTarget;
      return {
        target: target,
        currentTarget: currentTarget
      };
    });
    var mediumBlur = createMedium();
    var mediumEffect = createMedium();
    var mediumSidecar = createSidecarMedium({
      async: true
    });

    var emptyArray = [];
    var FocusLock = /*#__PURE__*/React__namespace.forwardRef(function FocusLockUI(props, parentRef) {
      var _extends2;
      var _React$useState = React__namespace.useState(),
        realObserved = _React$useState[0],
        setObserved = _React$useState[1];
      var observed = React__namespace.useRef();
      var isActive = React__namespace.useRef(false);
      var originalFocusedElement = React__namespace.useRef(null);
      var children = props.children,
        disabled = props.disabled,
        noFocusGuards = props.noFocusGuards,
        persistentFocus = props.persistentFocus,
        crossFrame = props.crossFrame,
        autoFocus = props.autoFocus,
        allowTextSelection = props.allowTextSelection,
        group = props.group,
        className = props.className,
        whiteList = props.whiteList,
        _props$shards = props.shards,
        shards = _props$shards === void 0 ? emptyArray : _props$shards,
        _props$as = props.as,
        Container = _props$as === void 0 ? 'div' : _props$as,
        _props$lockProps = props.lockProps,
        containerProps = _props$lockProps === void 0 ? {} : _props$lockProps,
        SideCar = props.sideCar,
        shouldReturnFocus = props.returnFocus,
        onActivationCallback = props.onActivation,
        onDeactivationCallback = props.onDeactivation;
      var _React$useState2 = React__namespace.useState({}),
        id = _React$useState2[0]; // SIDE EFFECT CALLBACKS

      var onActivation = React__namespace.useCallback(function () {
        originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
        if (observed.current && onActivationCallback) {
          onActivationCallback(observed.current);
        }
        isActive.current = true;
      }, [onActivationCallback]);
      var onDeactivation = React__namespace.useCallback(function () {
        isActive.current = false;
        if (onDeactivationCallback) {
          onDeactivationCallback(observed.current);
        }
      }, [onDeactivationCallback]);
      var returnFocus = React__namespace.useCallback(function (allowDefer) {
        var current = originalFocusedElement.current;
        if (Boolean(shouldReturnFocus) && current && current.focus) {
          var focusOptions = typeof shouldReturnFocus === 'object' ? shouldReturnFocus : undefined;
          originalFocusedElement.current = null;
          if (allowDefer) {
            // React might return focus after update
            // it's safer to defer the action
            Promise.resolve().then(function () {
              return current.focus(focusOptions);
            });
          } else {
            current.focus(focusOptions);
          }
        }
      }, [shouldReturnFocus]); // MEDIUM CALLBACKS

      var onFocus = React__namespace.useCallback(function (event) {
        if (isActive.current) {
          mediumFocus.useMedium(event);
        }
      }, []);
      var onBlur = mediumBlur.useMedium; // REF PROPAGATION
      // not using real refs due to race conditions

      var setObserveNode = React__namespace.useCallback(function (newObserved) {
        if (observed.current !== newObserved) {
          observed.current = newObserved;
          setObserved(newObserved);
        }
      }, []);
      {
        if (typeof allowTextSelection !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn('React-Focus-Lock: allowTextSelection is deprecated and enabled by default');
        }
        React__namespace.useEffect(function () {
          if (!observed.current) {
            // eslint-disable-next-line no-console
            console.error('FocusLock: could not obtain ref to internal node');
          }
        }, []);
      }
      var lockProps = _extends((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && 'disabled', _extends2[FOCUS_GROUP] = group, _extends2), containerProps);
      var hasLeadingGuards = noFocusGuards !== true;
      var hasTailingGuards = hasLeadingGuards && noFocusGuards !== 'tail';
      var mergedRef = useMergeRefs([parentRef, setObserveNode]);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, hasLeadingGuards && [/*#__PURE__*/React__namespace.createElement("div", {
        key: "guard-first",
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 0,
        style: hiddenGuard
      }), /*#__PURE__*/
      // nearest focus guard
      React__namespace.createElement("div", {
        key: "guard-nearest",
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 1,
        style: hiddenGuard
      }) // first tabbed element guard
      ], !disabled && /*#__PURE__*/React__namespace.createElement(SideCar, {
        id: id,
        sideCar: mediumSidecar,
        observed: realObserved,
        disabled: disabled,
        persistentFocus: persistentFocus,
        crossFrame: crossFrame,
        autoFocus: autoFocus,
        whiteList: whiteList,
        shards: shards,
        onActivation: onActivation,
        onDeactivation: onDeactivation,
        returnFocus: returnFocus
      }), /*#__PURE__*/React__namespace.createElement(Container, _extends({
        ref: mergedRef
      }, lockProps, {
        className: className,
        onBlur: onBlur,
        onFocus: onFocus
      }), children), hasTailingGuards && /*#__PURE__*/React__namespace.createElement("div", {
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 0,
        style: hiddenGuard
      }));
    });
    FocusLock.propTypes = {
      children: propTypes$3.exports.node,
      disabled: propTypes$3.exports.bool,
      returnFocus: propTypes$3.exports.oneOfType([propTypes$3.exports.bool, propTypes$3.exports.object]),
      noFocusGuards: propTypes$3.exports.bool,
      allowTextSelection: propTypes$3.exports.bool,
      autoFocus: propTypes$3.exports.bool,
      persistentFocus: propTypes$3.exports.bool,
      crossFrame: propTypes$3.exports.bool,
      group: propTypes$3.exports.string,
      className: propTypes$3.exports.string,
      whiteList: propTypes$3.exports.func,
      shards: propTypes$3.exports.arrayOf(propTypes$3.exports.any),
      as: propTypes$3.exports.oneOfType([propTypes$3.exports.string, propTypes$3.exports.func, propTypes$3.exports.object]),
      lockProps: propTypes$3.exports.object,
      onActivation: propTypes$3.exports.func,
      onDeactivation: propTypes$3.exports.func,
      sideCar: propTypes$3.exports.any.isRequired
    } ;
    FocusLock.defaultProps = {
      children: undefined,
      disabled: false,
      returnFocus: false,
      noFocusGuards: false,
      autoFocus: true,
      persistentFocus: false,
      crossFrame: true,
      allowTextSelection: undefined,
      group: undefined,
      className: undefined,
      whiteList: undefined,
      shards: undefined,
      as: 'div',
      lockProps: {},
      onActivation: undefined,
      onDeactivation: undefined
    };

    function _setPrototypeOf$1(o, p) {
      _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf$1(o, p);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf$1(subClass, superClass);
    }

    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }

    function toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }

    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : String(i);
    }

    function _defineProperty$1(obj, key, value) {
      key = toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }

    function withSideEffect(reducePropsToState, handleStateChangeOnClient) {
      {
        if (typeof reducePropsToState !== 'function') {
          throw new Error('Expected reducePropsToState to be a function.');
        }
        if (typeof handleStateChangeOnClient !== 'function') {
          throw new Error('Expected handleStateChangeOnClient to be a function.');
        }
      }
      function getDisplayName(WrappedComponent) {
        return WrappedComponent.displayName || WrappedComponent.name || 'Component';
      }
      return function wrap(WrappedComponent) {
        {
          if (typeof WrappedComponent !== 'function') {
            throw new Error('Expected WrappedComponent to be a React component.');
          }
        }
        var mountedInstances = [];
        var state;
        function emitChange() {
          state = reducePropsToState(mountedInstances.map(function (instance) {
            return instance.props;
          }));
          handleStateChangeOnClient(state);
        }
        var SideEffect = /*#__PURE__*/function (_PureComponent) {
          _inheritsLoose(SideEffect, _PureComponent);
          function SideEffect() {
            return _PureComponent.apply(this, arguments) || this;
          }

          // Try to use displayName of wrapped component
          SideEffect.peek = function peek() {
            return state;
          };
          var _proto = SideEffect.prototype;
          _proto.componentDidMount = function componentDidMount() {
            mountedInstances.push(this);
            emitChange();
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            emitChange();
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            var index = mountedInstances.indexOf(this);
            mountedInstances.splice(index, 1);
            emitChange();
          };
          _proto.render = function render() {
            return /*#__PURE__*/React__default["default"].createElement(WrappedComponent, this.props);
          };
          return SideEffect;
        }(React.PureComponent);
        _defineProperty$1(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
        return SideEffect;
      };
    }

    var toArray = function (a) {
      var ret = Array(a.length);
      for (var i = 0; i < a.length; ++i) {
        ret[i] = a[i];
      }
      return ret;
    };
    var asArray = function (a) {
      return Array.isArray(a) ? a : [a];
    };

    var filterNested = function (nodes) {
      var contained = new Set();
      var l = nodes.length;
      for (var i = 0; i < l; i += 1) {
        for (var j = i + 1; j < l; j += 1) {
          var position = nodes[i].compareDocumentPosition(nodes[j]);
          if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
            contained.add(j);
          }
          if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
            contained.add(i);
          }
        }
      }
      return nodes.filter(function (_, index) {
        return !contained.has(index);
      });
    };
    var getTopParent = function (node) {
      return node.parentNode ? getTopParent(node.parentNode) : node;
    };
    var getAllAffectedNodes = function (node) {
      var nodes = asArray(node);
      return nodes.filter(Boolean).reduce(function (acc, currentNode) {
        var group = currentNode.getAttribute(FOCUS_GROUP);
        acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[" + FOCUS_GROUP + "=\"" + group + "\"]:not([" + FOCUS_DISABLED + "=\"disabled\"])"))) : [currentNode]);
        return acc;
      }, []);
    };

    var isElementHidden = function (node) {
      if (node.nodeType !== Node.ELEMENT_NODE) {
        return false;
      }
      var computedStyle = window.getComputedStyle(node, null);
      if (!computedStyle || !computedStyle.getPropertyValue) {
        return false;
      }
      return computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden';
    };
    var isVisibleUncached = function (node, checkParent) {
      return !node || node === document || node && node.nodeType === Node.DOCUMENT_NODE || !isElementHidden(node) && checkParent(node.parentNode && node.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node.parentNode.host : node.parentNode);
    };
    var isVisibleCached = function (visibilityCache, node) {
      var cached = visibilityCache.get(node);
      if (cached !== undefined) {
        return cached;
      }
      var result = isVisibleUncached(node, isVisibleCached.bind(undefined, visibilityCache));
      visibilityCache.set(node, result);
      return result;
    };
    var notHiddenInput = function (node) {
      return !((node.tagName === 'INPUT' || node.tagName === 'BUTTON') && (node.type === 'hidden' || node.disabled));
    };
    var isGuard = function (node) {
      return Boolean(node && node.dataset && node.dataset.focusGuard);
    };
    var isNotAGuard = function (node) {
      return !isGuard(node);
    };
    var isDefined = function (x) {
      return Boolean(x);
    };

    var tabSort = function (a, b) {
      var tabDiff = a.tabIndex - b.tabIndex;
      var indexDiff = a.index - b.index;
      if (tabDiff) {
        if (!a.tabIndex) {
          return 1;
        }
        if (!b.tabIndex) {
          return -1;
        }
      }
      return tabDiff || indexDiff;
    };
    var orderByTabIndex = function (nodes, filterNegative, keepGuards) {
      return toArray(nodes).map(function (node, index) {
        return {
          node: node,
          index: index,
          tabIndex: keepGuards && node.tabIndex === -1 ? (node.dataset || {}).focusGuard ? 0 : -1 : node.tabIndex
        };
      }).filter(function (data) {
        return !filterNegative || data.tabIndex >= 0;
      }).sort(tabSort);
    };

    var tabbables = ['button:enabled', 'select:enabled', 'textarea:enabled', 'input:enabled', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[tabindex]', '[contenteditable]', '[autofocus]'];

    var queryTabbables = tabbables.join(',');
    var queryGuardTabbables = queryTabbables + ", [data-focus-guard]";
    var getFocusables = function (parents, withGuards) {
      return parents.reduce(function (acc, parent) {
        return acc.concat(toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)), parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function (node) {
          return node === parent;
        }) : []);
      }, []);
    };
    var getParentAutofocusables = function (parent) {
      var parentFocus = parent.querySelectorAll("[" + FOCUS_AUTO + "]");
      return toArray(parentFocus).map(function (node) {
        return getFocusables([node]);
      }).reduce(function (acc, nodes) {
        return acc.concat(nodes);
      }, []);
    };

    var filterFocusable = function (nodes, visibilityCache) {
      return toArray(nodes).filter(function (node) {
        return isVisibleCached(visibilityCache, node);
      }).filter(function (node) {
        return notHiddenInput(node);
      });
    };
    var getTabbableNodes = function (topNodes, visibilityCache, withGuards) {
      return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
    };
    var getAllTabbableNodes = function (topNodes, visibilityCache) {
      return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
    };
    var parentAutofocusables = function (topNode, visibilityCache) {
      return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
    };

    var getParents = function (node, parents) {
      if (parents === void 0) {
        parents = [];
      }
      parents.push(node);
      if (node.parentNode) {
        getParents(node.parentNode, parents);
      }
      return parents;
    };
    var getCommonParent = function (nodeA, nodeB) {
      var parentsA = getParents(nodeA);
      var parentsB = getParents(nodeB);
      for (var i = 0; i < parentsA.length; i += 1) {
        var currentParent = parentsA[i];
        if (parentsB.indexOf(currentParent) >= 0) {
          return currentParent;
        }
      }
      return false;
    };
    var getTopCommonParent = function (baseActiveElement, leftEntry, rightEntries) {
      var activeElements = asArray(baseActiveElement);
      var leftEntries = asArray(leftEntry);
      var activeElement = activeElements[0];
      var topCommon = false;
      leftEntries.filter(Boolean).forEach(function (entry) {
        topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
        rightEntries.filter(Boolean).forEach(function (subEntry) {
          var common = getCommonParent(activeElement, subEntry);
          if (common) {
            if (!topCommon || common.contains(topCommon)) {
              topCommon = common;
            } else {
              topCommon = getCommonParent(common, topCommon);
            }
          }
        });
      });
      return topCommon;
    };
    var allParentAutofocusables = function (entries, visibilityCache) {
      return entries.reduce(function (acc, node) {
        return acc.concat(parentAutofocusables(node, visibilityCache));
      }, []);
    };

    var getFocusabledIn = function (topNode) {
      var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
      var commonParent = getTopCommonParent(topNode, topNode, entries);
      var visibilityCache = new Map();
      var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
      var innerElements = getTabbableNodes(entries, visibilityCache).filter(function (_a) {
        var node = _a.node;
        return isNotAGuard(node);
      }).map(function (_a) {
        var node = _a.node;
        return node;
      });
      return outerNodes.map(function (_a) {
        var node = _a.node,
          index = _a.index;
        return {
          node: node,
          index: index,
          lockItem: innerElements.indexOf(node) >= 0,
          guard: isGuard(node)
        };
      });
    };

    var focusInFrame = function (frame) {
      return frame === document.activeElement;
    };
    var focusInsideIframe = function (topNode) {
      return Boolean(toArray(topNode.querySelectorAll('iframe')).some(function (node) {
        return focusInFrame(node);
      }));
    };
    var focusInside = function (topNode) {
      var activeElement = document && document.activeElement;
      if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
        return false;
      }
      return getAllAffectedNodes(topNode).reduce(function (result, node) {
        return result || node.contains(activeElement) || focusInsideIframe(node);
      }, false);
    };

    var focusIsHidden = function () {
      return document && toArray(document.querySelectorAll("[" + FOCUS_ALLOW + "]")).some(function (node) {
        return node.contains(document.activeElement);
      });
    };

    var isRadio = function (node) {
      return node.tagName === 'INPUT' && node.type === 'radio';
    };
    var findSelectedRadio = function (node, nodes) {
      return nodes.filter(isRadio).filter(function (el) {
        return el.name === node.name;
      }).filter(function (el) {
        return el.checked;
      })[0] || node;
    };
    var correctNode = function (node, nodes) {
      if (isRadio(node) && node.name) {
        return findSelectedRadio(node, nodes);
      }
      return node;
    };
    var correctNodes = function (nodes) {
      var resultSet = new Set();
      nodes.forEach(function (node) {
        return resultSet.add(correctNode(node, nodes));
      });
      return nodes.filter(function (node) {
        return resultSet.has(node);
      });
    };

    var pickFirstFocus = function (nodes) {
      if (nodes[0] && nodes.length > 1) {
        return correctNode(nodes[0], nodes);
      }
      return nodes[0];
    };
    var pickFocusable = function (nodes, index) {
      if (nodes.length > 1) {
        return nodes.indexOf(correctNode(nodes[index], nodes));
      }
      return index;
    };

    var NEW_FOCUS = 'NEW_FOCUS';
    var newFocus = function (innerNodes, outerNodes, activeElement, lastNode) {
      var cnt = innerNodes.length;
      var firstFocus = innerNodes[0];
      var lastFocus = innerNodes[cnt - 1];
      var isOnGuard = isGuard(activeElement);
      if (innerNodes.indexOf(activeElement) >= 0) {
        return undefined;
      }
      var activeIndex = outerNodes.indexOf(activeElement);
      var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
      var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
      var indexDiff = activeIndex - lastIndex;
      var firstNodeIndex = outerNodes.indexOf(firstFocus);
      var lastNodeIndex = outerNodes.indexOf(lastFocus);
      var correctedNodes = correctNodes(outerNodes);
      var correctedIndexDiff = correctedNodes.indexOf(activeElement) - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
      var returnFirstNode = pickFocusable(innerNodes, 0);
      var returnLastNode = pickFocusable(innerNodes, cnt - 1);
      if (activeIndex === -1 || lastNodeInside === -1) {
        return NEW_FOCUS;
      }
      if (!indexDiff && lastNodeInside >= 0) {
        return lastNodeInside;
      }
      if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
        return returnLastNode;
      }
      if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
        return returnFirstNode;
      }
      if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
        return lastNodeInside;
      }
      if (activeIndex <= firstNodeIndex) {
        return returnLastNode;
      }
      if (activeIndex > lastNodeIndex) {
        return returnFirstNode;
      }
      if (indexDiff) {
        if (Math.abs(indexDiff) > 1) {
          return lastNodeInside;
        }
        return (cnt + lastNodeInside + indexDiff) % cnt;
      }
      return undefined;
    };

    var findAutoFocused = function (autoFocusables) {
      return function (node) {
        return node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;
      };
    };
    var reorderNodes = function (srcNodes, dstNodes) {
      var remap = new Map();
      dstNodes.forEach(function (entity) {
        return remap.set(entity.node, entity);
      });
      return srcNodes.map(function (node) {
        return remap.get(node);
      }).filter(isDefined);
    };
    var getFocusMerge = function (topNode, lastNode) {
      var activeElement = document && document.activeElement;
      var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
      var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
      var visibilityCache = new Map();
      var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
      var innerElements = getTabbableNodes(entries, visibilityCache).filter(function (_a) {
        var node = _a.node;
        return isNotAGuard(node);
      });
      if (!innerElements[0]) {
        innerElements = anyFocusable;
        if (!innerElements[0]) {
          return undefined;
        }
      }
      var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function (_a) {
        var node = _a.node;
        return node;
      });
      var orderedInnerElements = reorderNodes(outerNodes, innerElements);
      var innerNodes = orderedInnerElements.map(function (_a) {
        var node = _a.node;
        return node;
      });
      var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
      if (newId === NEW_FOCUS) {
        var autoFocusable = anyFocusable.map(function (_a) {
          var node = _a.node;
          return node;
        }).filter(findAutoFocused(allParentAutofocusables(entries, visibilityCache)));
        return {
          node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes)
        };
      }
      if (newId === undefined) {
        return newId;
      }
      return orderedInnerElements[newId];
    };

    var focusOn = function (target) {
      target.focus();
      if ('contentWindow' in target && target.contentWindow) {
        target.contentWindow.focus();
      }
    };
    var guardCount = 0;
    var lockDisabled = false;
    var setFocus = function (topNode, lastNode) {
      var focusable = getFocusMerge(topNode, lastNode);
      if (lockDisabled) {
        return;
      }
      if (focusable) {
        if (guardCount > 2) {
          console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' + 'See https://github.com/theKashey/focus-lock/#focus-fighting');
          lockDisabled = true;
          setTimeout(function () {
            lockDisabled = false;
          }, 1);
          return;
        }
        guardCount++;
        focusOn(focusable.node);
        guardCount--;
      }
    };

    function deferAction(action) {
      // Hidding setImmediate from Webpack to avoid inserting polyfill
      var _window = window,
        setImmediate = _window.setImmediate;
      if (typeof setImmediate !== 'undefined') {
        setImmediate(action);
      } else {
        setTimeout(action, 1);
      }
    }

    var focusOnBody = function focusOnBody() {
      return document && document.activeElement === document.body;
    };
    var isFreeFocus = function isFreeFocus() {
      return focusOnBody() || focusIsHidden();
    };
    var lastActiveTrap = null;
    var lastActiveFocus = null;
    var lastPortaledElement = null;
    var focusWasOutsideWindow = false;
    var defaultWhitelist = function defaultWhitelist() {
      return true;
    };
    var focusWhitelisted = function focusWhitelisted(activeElement) {
      return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
    };
    var recordPortal = function recordPortal(observerNode, portaledElement) {
      lastPortaledElement = {
        observerNode: observerNode,
        portaledElement: portaledElement
      };
    };
    var focusIsPortaledPair = function focusIsPortaledPair(element) {
      return lastPortaledElement && lastPortaledElement.portaledElement === element;
    };
    function autoGuard(startIndex, end, step, allNodes) {
      var lastGuard = null;
      var i = startIndex;
      do {
        var item = allNodes[i];
        if (item.guard) {
          if (item.node.dataset.focusAutoGuard) {
            lastGuard = item;
          }
        } else if (item.lockItem) {
          if (i !== startIndex) {
            // we will tab to the next element
            return;
          }
          lastGuard = null;
        } else {
          break;
        }
      } while ((i += step) !== end);
      if (lastGuard) {
        lastGuard.node.tabIndex = 0;
      }
    }
    var extractRef = function extractRef(ref) {
      return ref && 'current' in ref ? ref.current : ref;
    };
    var focusWasOutside = function focusWasOutside(crossFrameOption) {
      if (crossFrameOption) {
        // with cross frame return true for any value
        return Boolean(focusWasOutsideWindow);
      } // in other case return only of focus went a while aho

      return focusWasOutsideWindow === 'meanwhile';
    };
    var activateTrap = function activateTrap() {
      var result = false;
      if (lastActiveTrap) {
        var _lastActiveTrap = lastActiveTrap,
          observed = _lastActiveTrap.observed,
          persistentFocus = _lastActiveTrap.persistentFocus,
          autoFocus = _lastActiveTrap.autoFocus,
          shards = _lastActiveTrap.shards,
          crossFrame = _lastActiveTrap.crossFrame;
        var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
        var activeElement = document && document.activeElement;
        if (workingNode) {
          var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
          if (!activeElement || focusWhitelisted(activeElement)) {
            if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
              if (workingNode && !(focusInside(workingArea) || focusIsPortaledPair(activeElement))) {
                if (document && !lastActiveFocus && activeElement && !autoFocus) {
                  // Check if blur() exists, which is missing on certain elements on IE
                  if (activeElement.blur) {
                    activeElement.blur();
                  }
                  document.body.focus();
                } else {
                  result = setFocus(workingArea, lastActiveFocus);
                  lastPortaledElement = {};
                }
              }
              focusWasOutsideWindow = false;
              lastActiveFocus = document && document.activeElement;
            }
          }
          if (document) {
            var newActiveElement = document && document.activeElement;
            var allNodes = getFocusabledIn(workingArea);
            var focusedIndex = allNodes.map(function (_ref) {
              var node = _ref.node;
              return node;
            }).indexOf(newActiveElement);
            if (focusedIndex > -1) {
              // remove old focus
              allNodes.filter(function (_ref2) {
                var guard = _ref2.guard,
                  node = _ref2.node;
                return guard && node.dataset.focusAutoGuard;
              }).forEach(function (_ref3) {
                var node = _ref3.node;
                return node.removeAttribute('tabIndex');
              });
              autoGuard(focusedIndex, allNodes.length, +1, allNodes);
              autoGuard(focusedIndex, -1, -1, allNodes);
            }
          }
        }
      }
      return result;
    };
    var onTrap = function onTrap(event) {
      if (activateTrap() && event) {
        // prevent scroll jump
        event.stopPropagation();
        event.preventDefault();
      }
    };
    var onBlur = function onBlur() {
      return deferAction(activateTrap);
    };
    var onFocus = function onFocus(event) {
      // detect portal
      var source = event.target;
      var currentNode = event.currentTarget;
      if (!currentNode.contains(source)) {
        recordPortal(currentNode, source);
      }
    };
    var FocusWatcher = function FocusWatcher() {
      return null;
    };
    ({
      children: propTypes$3.exports.node.isRequired
    }) ;
    var onWindowBlur = function onWindowBlur() {
      focusWasOutsideWindow = 'just'; // using setTimeout to set  this variable after React/sidecar reaction

      setTimeout(function () {
        focusWasOutsideWindow = 'meanwhile';
      }, 0);
    };
    var attachHandler = function attachHandler() {
      document.addEventListener('focusin', onTrap, true);
      document.addEventListener('focusout', onBlur);
      window.addEventListener('blur', onWindowBlur);
    };
    var detachHandler = function detachHandler() {
      document.removeEventListener('focusin', onTrap, true);
      document.removeEventListener('focusout', onBlur);
      window.removeEventListener('blur', onWindowBlur);
    };
    function reducePropsToState(propsList) {
      return propsList.filter(function (_ref5) {
        var disabled = _ref5.disabled;
        return !disabled;
      });
    }
    function handleStateChangeOnClient(traps) {
      var trap = traps.slice(-1)[0];
      if (trap && !lastActiveTrap) {
        attachHandler();
      }
      var lastTrap = lastActiveTrap;
      var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
      lastActiveTrap = trap;
      if (lastTrap && !sameTrap) {
        lastTrap.onDeactivation(); // return focus only of last trap was removed

        if (!traps.filter(function (_ref6) {
          var id = _ref6.id;
          return id === lastTrap.id;
        }).length) {
          // allow defer is no other trap is awaiting restore
          lastTrap.returnFocus(!trap);
        }
      }
      if (trap) {
        lastActiveFocus = null;
        if (!sameTrap || lastTrap.observed !== trap.observed) {
          trap.onActivation();
        }
        activateTrap();
        deferAction(activateTrap);
      } else {
        detachHandler();
        lastActiveFocus = null;
      }
    } // bind medium

    mediumFocus.assignSyncMedium(onFocus);
    mediumBlur.assignMedium(onBlur);
    mediumEffect.assignMedium(function (cb) {
      return cb({
        moveFocusInside: setFocus,
        focusInside: focusInside
      });
    });
    var FocusTrap = withSideEffect(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

    /* that would be a BREAKING CHANGE!
    // delaying sidecar execution till the first usage
    const RequireSideCar = (props) => {
      // eslint-disable-next-line global-require
      const SideCar = require('./Trap').default;
      return <SideCar {...props} />;
    };
    */

    var FocusLockCombination = /*#__PURE__*/React__namespace.forwardRef(function FocusLockUICombination(props, ref) {
      return /*#__PURE__*/React__namespace.createElement(FocusLock, _extends({
        sideCar: FocusTrap,
        ref: ref
      }, props));
    });
    var _ref = FocusLock.propTypes || {};
      _ref.sideCar;
      var propTypes$2 = _objectWithoutPropertiesLoose(_ref, ["sideCar"]);
    FocusLockCombination.propTypes = propTypes$2 ;

    ({
      children: propTypes$3.exports.node.isRequired,
      disabled: propTypes$3.exports.bool,
      className: propTypes$3.exports.string
    }) ;

    ({
      children: propTypes$3.exports.node.isRequired,
      disabled: propTypes$3.exports.bool,
      className: propTypes$3.exports.string
    }) ;

    ({
      children: propTypes$3.exports.node.isRequired,
      className: propTypes$3.exports.string
    }) ;

    var reactIs$3 = {exports: {}};

    var reactIs_development$2 = {};

    /**
     * @license React
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var hasRequiredReactIs_development$2;

    function requireReactIs_development$2 () {
    	if (hasRequiredReactIs_development$2) return reactIs_development$2;
    	hasRequiredReactIs_development$2 = 1;

    	{
    	  (function () {

    	    // ATTENTION
    	    // When adding new symbols to this file,
    	    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    	    // The Symbol used to tag the ReactElement-like types.
    	    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    	    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    	    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    	    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    	    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    	    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    	    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    	    var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
    	    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    	    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    	    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    	    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    	    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    	    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

    	    // -----------------------------------------------------------------------------

    	    var enableScopeAPI = false; // Experimental Create Event Handle API.
    	    var enableCacheElement = false;
    	    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    	    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    	    // stuff. Intended to enable React core members to more easily debug scheduling
    	    // issues in DEV builds.

    	    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    	    var REACT_MODULE_REFERENCE;
    	    {
    	      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    	    }
    	    function isValidElementType(type) {
    	      if (typeof type === 'string' || typeof type === 'function') {
    	        return true;
    	      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

    	      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
    	        return true;
    	      }
    	      if (typeof type === 'object' && type !== null) {
    	        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
    	        // This needs to include all possible module reference object
    	        // types supported by any Flight configuration anywhere since
    	        // we don't know which Flight build this will end up being used
    	        // with.
    	        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
    	          return true;
    	        }
    	      }
    	      return false;
    	    }
    	    function typeOf(object) {
    	      if (typeof object === 'object' && object !== null) {
    	        var $$typeof = object.$$typeof;
    	        switch ($$typeof) {
    	          case REACT_ELEMENT_TYPE:
    	            var type = object.type;
    	            switch (type) {
    	              case REACT_FRAGMENT_TYPE:
    	              case REACT_PROFILER_TYPE:
    	              case REACT_STRICT_MODE_TYPE:
    	              case REACT_SUSPENSE_TYPE:
    	              case REACT_SUSPENSE_LIST_TYPE:
    	                return type;
    	              default:
    	                var $$typeofType = type && type.$$typeof;
    	                switch ($$typeofType) {
    	                  case REACT_SERVER_CONTEXT_TYPE:
    	                  case REACT_CONTEXT_TYPE:
    	                  case REACT_FORWARD_REF_TYPE:
    	                  case REACT_LAZY_TYPE:
    	                  case REACT_MEMO_TYPE:
    	                  case REACT_PROVIDER_TYPE:
    	                    return $$typeofType;
    	                  default:
    	                    return $$typeof;
    	                }
    	            }
    	          case REACT_PORTAL_TYPE:
    	            return $$typeof;
    	        }
    	      }
    	      return undefined;
    	    }
    	    var ContextConsumer = REACT_CONTEXT_TYPE;
    	    var ContextProvider = REACT_PROVIDER_TYPE;
    	    var Element = REACT_ELEMENT_TYPE;
    	    var ForwardRef = REACT_FORWARD_REF_TYPE;
    	    var Fragment = REACT_FRAGMENT_TYPE;
    	    var Lazy = REACT_LAZY_TYPE;
    	    var Memo = REACT_MEMO_TYPE;
    	    var Portal = REACT_PORTAL_TYPE;
    	    var Profiler = REACT_PROFILER_TYPE;
    	    var StrictMode = REACT_STRICT_MODE_TYPE;
    	    var Suspense = REACT_SUSPENSE_TYPE;
    	    var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    	    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    	    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    	    function isAsyncMode(object) {
    	      {
    	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
    	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

    	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
    	        }
    	      }
    	      return false;
    	    }
    	    function isConcurrentMode(object) {
    	      {
    	        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
    	          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

    	          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
    	        }
    	      }
    	      return false;
    	    }
    	    function isContextConsumer(object) {
    	      return typeOf(object) === REACT_CONTEXT_TYPE;
    	    }
    	    function isContextProvider(object) {
    	      return typeOf(object) === REACT_PROVIDER_TYPE;
    	    }
    	    function isElement(object) {
    	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    	    }
    	    function isForwardRef(object) {
    	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    	    }
    	    function isFragment(object) {
    	      return typeOf(object) === REACT_FRAGMENT_TYPE;
    	    }
    	    function isLazy(object) {
    	      return typeOf(object) === REACT_LAZY_TYPE;
    	    }
    	    function isMemo(object) {
    	      return typeOf(object) === REACT_MEMO_TYPE;
    	    }
    	    function isPortal(object) {
    	      return typeOf(object) === REACT_PORTAL_TYPE;
    	    }
    	    function isProfiler(object) {
    	      return typeOf(object) === REACT_PROFILER_TYPE;
    	    }
    	    function isStrictMode(object) {
    	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    	    }
    	    function isSuspense(object) {
    	      return typeOf(object) === REACT_SUSPENSE_TYPE;
    	    }
    	    function isSuspenseList(object) {
    	      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    	    }
    	    reactIs_development$2.ContextConsumer = ContextConsumer;
    	    reactIs_development$2.ContextProvider = ContextProvider;
    	    reactIs_development$2.Element = Element;
    	    reactIs_development$2.ForwardRef = ForwardRef;
    	    reactIs_development$2.Fragment = Fragment;
    	    reactIs_development$2.Lazy = Lazy;
    	    reactIs_development$2.Memo = Memo;
    	    reactIs_development$2.Portal = Portal;
    	    reactIs_development$2.Profiler = Profiler;
    	    reactIs_development$2.StrictMode = StrictMode;
    	    reactIs_development$2.Suspense = Suspense;
    	    reactIs_development$2.SuspenseList = SuspenseList;
    	    reactIs_development$2.isAsyncMode = isAsyncMode;
    	    reactIs_development$2.isConcurrentMode = isConcurrentMode;
    	    reactIs_development$2.isContextConsumer = isContextConsumer;
    	    reactIs_development$2.isContextProvider = isContextProvider;
    	    reactIs_development$2.isElement = isElement;
    	    reactIs_development$2.isForwardRef = isForwardRef;
    	    reactIs_development$2.isFragment = isFragment;
    	    reactIs_development$2.isLazy = isLazy;
    	    reactIs_development$2.isMemo = isMemo;
    	    reactIs_development$2.isPortal = isPortal;
    	    reactIs_development$2.isProfiler = isProfiler;
    	    reactIs_development$2.isStrictMode = isStrictMode;
    	    reactIs_development$2.isSuspense = isSuspense;
    	    reactIs_development$2.isSuspenseList = isSuspenseList;
    	    reactIs_development$2.isValidElementType = isValidElementType;
    	    reactIs_development$2.typeOf = typeOf;
    	  })();
    	}
    	return reactIs_development$2;
    }

    (function (module) {

    	{
    	  module.exports = requireReactIs_development$2();
    	}
    } (reactIs$3));

    function stylis_min(W) {
      function M(d, c, e, h, a) {
        for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
          g = e.charCodeAt(l);
          l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);
          if (0 === b + n + v + m) {
            if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
              switch (g) {
                case 32:
                case 9:
                case 59:
                case 13:
                case 10:
                  break;
                default:
                  f += e.charAt(l);
              }
              g = 59;
            }
            switch (g) {
              case 123:
                f = f.trim();
                q = f.charCodeAt(0);
                k = 1;
                for (t = ++l; l < B;) {
                  switch (g = e.charCodeAt(l)) {
                    case 123:
                      k++;
                      break;
                    case 125:
                      k--;
                      break;
                    case 47:
                      switch (g = e.charCodeAt(l + 1)) {
                        case 42:
                        case 47:
                          a: {
                            for (u = l + 1; u < J; ++u) {
                              switch (e.charCodeAt(u)) {
                                case 47:
                                  if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                    l = u + 1;
                                    break a;
                                  }
                                  break;
                                case 10:
                                  if (47 === g) {
                                    l = u + 1;
                                    break a;
                                  }
                              }
                            }
                            l = u;
                          }
                      }
                      break;
                    case 91:
                      g++;
                    case 40:
                      g++;
                    case 34:
                    case 39:
                      for (; l++ < J && e.charCodeAt(l) !== g;) {}
                  }
                  if (0 === k) break;
                  l++;
                }
                k = e.substring(t, l);
                0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));
                switch (q) {
                  case 64:
                    0 < r && (f = f.replace(N, ''));
                    g = f.charCodeAt(1);
                    switch (g) {
                      case 100:
                      case 109:
                      case 115:
                      case 45:
                        r = c;
                        break;
                      default:
                        r = O;
                    }
                    k = M(c, r, k, g, a + 1);
                    t = k.length;
                    0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                    if (0 < t) switch (g) {
                      case 115:
                        f = f.replace(da, ea);
                      case 100:
                      case 109:
                      case 45:
                        k = f + '{' + k + '}';
                        break;
                      case 107:
                        f = f.replace(fa, '$1 $2');
                        k = f + '{' + k + '}';
                        k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                        break;
                      default:
                        k = f + k, 112 === h && (k = (p += k, ''));
                    } else k = '';
                    break;
                  default:
                    k = M(c, X(c, f, I), k, h, a + 1);
                }
                F += k;
                k = I = r = u = q = 0;
                f = '';
                g = e.charCodeAt(++l);
                break;
              case 125:
              case 59:
                f = (0 < r ? f.replace(N, '') : f).trim();
                if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                  case 0:
                    break;
                  case 64:
                    if (105 === g || 99 === g) {
                      G += f + e.charAt(l);
                      break;
                    }
                  default:
                    58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
                }
                I = r = u = q = 0;
                f = '';
                g = e.charCodeAt(++l);
            }
          }
          switch (g) {
            case 13:
            case 10:
              47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
              0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
              z = 1;
              D++;
              break;
            case 59:
            case 125:
              if (0 === b + n + v + m) {
                z++;
                break;
              }
            default:
              z++;
              y = e.charAt(l);
              switch (g) {
                case 9:
                case 32:
                  if (0 === n + m + b) switch (x) {
                    case 44:
                    case 58:
                    case 9:
                    case 32:
                      y = '';
                      break;
                    default:
                      32 !== g && (y = ' ');
                  }
                  break;
                case 0:
                  y = '\\0';
                  break;
                case 12:
                  y = '\\f';
                  break;
                case 11:
                  y = '\\v';
                  break;
                case 38:
                  0 === n + b + m && (r = I = 1, y = '\f' + y);
                  break;
                case 108:
                  if (0 === n + b + m + E && 0 < u) switch (l - u) {
                    case 2:
                      112 === x && 58 === e.charCodeAt(l - 3) && (E = x);
                    case 8:
                      111 === K && (E = K);
                  }
                  break;
                case 58:
                  0 === n + b + m && (u = l);
                  break;
                case 44:
                  0 === b + v + n + m && (r = 1, y += '\r');
                  break;
                case 34:
                case 39:
                  0 === b && (n = n === g ? 0 : 0 === n ? g : n);
                  break;
                case 91:
                  0 === n + b + v && m++;
                  break;
                case 93:
                  0 === n + b + v && m--;
                  break;
                case 41:
                  0 === n + b + m && v--;
                  break;
                case 40:
                  if (0 === n + b + m) {
                    if (0 === q) switch (2 * x + 3 * K) {
                      case 533:
                        break;
                      default:
                        q = 1;
                    }
                    v++;
                  }
                  break;
                case 64:
                  0 === b + v + n + m + u + k && (k = 1);
                  break;
                case 42:
                case 47:
                  if (!(0 < n + m + v)) switch (b) {
                    case 0:
                      switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                        case 235:
                          b = 47;
                          break;
                        case 220:
                          t = l, b = 42;
                      }
                      break;
                    case 42:
                      47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
                  }
              }
              0 === b && (f += y);
          }
          K = x;
          x = g;
          l++;
        }
        t = p.length;
        if (0 < t) {
          r = c;
          if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
          p = r.join(',') + '{' + p + '}';
          if (0 !== w * E) {
            2 !== w || L(p, 2) || (E = 0);
            switch (E) {
              case 111:
                p = p.replace(ha, ':-moz-$1') + p;
                break;
              case 112:
                p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
            }
            E = 0;
          }
        }
        return G + p + F;
      }
      function X(d, c, e) {
        var h = c.trim().split(ia);
        c = h;
        var a = h.length,
          m = d.length;
        switch (m) {
          case 0:
          case 1:
            var b = 0;
            for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
              c[b] = Z(d, c[b], e).trim();
            }
            break;
          default:
            var v = b = 0;
            for (c = []; b < a; ++b) {
              for (var n = 0; n < m; ++n) {
                c[v++] = Z(d[n] + ' ', h[b], e).trim();
              }
            }
        }
        return c;
      }
      function Z(d, c, e) {
        var h = c.charCodeAt(0);
        33 > h && (h = (c = c.trim()).charCodeAt(0));
        switch (h) {
          case 38:
            return c.replace(F, '$1' + d.trim());
          case 58:
            return d.trim() + c.replace(F, '$1' + d.trim());
          default:
            if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
        }
        return d + c;
      }
      function P(d, c, e, h) {
        var a = d + ';',
          m = 2 * c + 3 * e + 4 * h;
        if (944 === m) {
          d = a.indexOf(':', 9) + 1;
          var b = a.substring(d, a.length - 1).trim();
          b = a.substring(0, d).trim() + b + ';';
          return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
        }
        if (0 === w || 2 === w && !L(a, 1)) return a;
        switch (m) {
          case 1015:
            return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;
          case 951:
            return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;
          case 963:
            return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;
          case 1009:
            if (100 !== a.charCodeAt(4)) break;
          case 969:
          case 942:
            return '-webkit-' + a + a;
          case 978:
            return '-webkit-' + a + '-moz-' + a + a;
          case 1019:
          case 983:
            return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;
          case 883:
            if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
            if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
            break;
          case 932:
            if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
              case 103:
                return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;
              case 115:
                return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;
              case 98:
                return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
            }
            return '-webkit-' + a + '-ms-' + a + a;
          case 964:
            return '-webkit-' + a + '-ms-flex-' + a + a;
          case 1023:
            if (99 !== a.charCodeAt(8)) break;
            b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
            return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;
          case 1005:
            return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;
          case 1e3:
            b = a.substring(13).trim();
            c = b.indexOf('-') + 1;
            switch (b.charCodeAt(0) + b.charCodeAt(c)) {
              case 226:
                b = a.replace(G, 'tb');
                break;
              case 232:
                b = a.replace(G, 'tb-rl');
                break;
              case 220:
                b = a.replace(G, 'lr');
                break;
              default:
                return a;
            }
            return '-webkit-' + a + '-ms-' + b + a;
          case 1017:
            if (-1 === a.indexOf('sticky', 9)) break;
          case 975:
            c = (a = d).length - 10;
            b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();
            switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
              case 203:
                if (111 > b.charCodeAt(8)) break;
              case 115:
                a = a.replace(b, '-webkit-' + b) + ';' + a;
                break;
              case 207:
              case 102:
                a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
            }
            return a + ';';
          case 938:
            if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
              case 105:
                return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;
              case 115:
                return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;
              default:
                return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
            }
            break;
          case 973:
          case 989:
            if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;
          case 931:
          case 953:
            if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
            break;
          case 962:
            if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
        }
        return a;
      }
      function L(d, c) {
        var e = d.indexOf(1 === c ? ':' : '{'),
          h = d.substring(0, 3 !== c ? e : 10);
        e = d.substring(e + 1, d.length - 1);
        return R(2 !== c ? h : h.replace(na, '$1'), e, c);
      }
      function ea(d, c) {
        var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
        return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
      }
      function H(d, c, e, h, a, m, b, v, n, q) {
        for (var g = 0, x = c, w; g < A; ++g) {
          switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
            case void 0:
            case !1:
            case !0:
            case null:
              break;
            default:
              x = w;
          }
        }
        if (x !== c) return x;
      }
      function T(d) {
        switch (d) {
          case void 0:
          case null:
            A = S.length = 0;
            break;
          default:
            if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
              T(d[c]);
            } else Y = !!d | 0;
        }
        return T;
      }
      function U(d) {
        d = d.prefix;
        void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
        return U;
      }
      function B(d, c) {
        var e = d;
        33 > e.charCodeAt(0) && (e = e.trim());
        V = e;
        e = [V];
        if (0 < A) {
          var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
          void 0 !== h && 'string' === typeof h && (c = h);
        }
        var a = M(O, e, c, 0, 0);
        0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
        V = '';
        E = 0;
        z = D = 1;
        return a;
      }
      var ca = /^\0+/g,
        N = /[\0\r\f]/g,
        aa = /: */g,
        ka = /zoo|gra/,
        ma = /([,: ])(transform)/g,
        ia = /,\r+?/g,
        F = /([\t\r\n ])*\f?&/g,
        fa = /@(k\w+)\s*(\S*)\s*/,
        Q = /::(place)/g,
        ha = /:(read-only)/g,
        G = /[svh]\w+-[tblr]{2}/,
        da = /\(\s*(.*)\s*\)/g,
        oa = /([\s\S]*?);/g,
        ba = /-self|flex-/g,
        na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
        la = /stretch|:\s*\w+\-(?:conte|avail)/,
        ja = /([^-])(image-set\()/,
        z = 1,
        D = 1,
        E = 0,
        w = 1,
        O = [],
        S = [],
        A = 0,
        R = null,
        Y = 0,
        V = '';
      B.use = T;
      B.set = U;
      void 0 !== W && U(W);
      return B;
    }

    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      // SVG-related properties
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };

    function memoize(fn) {
      var cache = Object.create(null);
      return function (arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
      };
    }

    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

    var isPropValid = /* #__PURE__ */memoize(function (prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
      /* o */ && prop.charCodeAt(1) === 110
      /* n */ && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */);

    var reactIs$2 = {exports: {}};

    var reactIs_development$1 = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var hasRequiredReactIs_development$1;

    function requireReactIs_development$1 () {
    	if (hasRequiredReactIs_development$1) return reactIs_development$1;
    	hasRequiredReactIs_development$1 = 1;

    	{
    	  (function () {

    	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    	    // nor polyfill, then a plain number is used for performance.
    	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    	    // (unstable) APIs that have been removed. Can we remove the symbols?

    	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    	    function isValidElementType(type) {
    	      return typeof type === 'string' || typeof type === 'function' ||
    	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    	    }
    	    function typeOf(object) {
    	      if (typeof object === 'object' && object !== null) {
    	        var $$typeof = object.$$typeof;
    	        switch ($$typeof) {
    	          case REACT_ELEMENT_TYPE:
    	            var type = object.type;
    	            switch (type) {
    	              case REACT_ASYNC_MODE_TYPE:
    	              case REACT_CONCURRENT_MODE_TYPE:
    	              case REACT_FRAGMENT_TYPE:
    	              case REACT_PROFILER_TYPE:
    	              case REACT_STRICT_MODE_TYPE:
    	              case REACT_SUSPENSE_TYPE:
    	                return type;
    	              default:
    	                var $$typeofType = type && type.$$typeof;
    	                switch ($$typeofType) {
    	                  case REACT_CONTEXT_TYPE:
    	                  case REACT_FORWARD_REF_TYPE:
    	                  case REACT_LAZY_TYPE:
    	                  case REACT_MEMO_TYPE:
    	                  case REACT_PROVIDER_TYPE:
    	                    return $$typeofType;
    	                  default:
    	                    return $$typeof;
    	                }
    	            }
    	          case REACT_PORTAL_TYPE:
    	            return $$typeof;
    	        }
    	      }
    	      return undefined;
    	    } // AsyncMode is deprecated along with isAsyncMode

    	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    	    var ContextConsumer = REACT_CONTEXT_TYPE;
    	    var ContextProvider = REACT_PROVIDER_TYPE;
    	    var Element = REACT_ELEMENT_TYPE;
    	    var ForwardRef = REACT_FORWARD_REF_TYPE;
    	    var Fragment = REACT_FRAGMENT_TYPE;
    	    var Lazy = REACT_LAZY_TYPE;
    	    var Memo = REACT_MEMO_TYPE;
    	    var Portal = REACT_PORTAL_TYPE;
    	    var Profiler = REACT_PROFILER_TYPE;
    	    var StrictMode = REACT_STRICT_MODE_TYPE;
    	    var Suspense = REACT_SUSPENSE_TYPE;
    	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    	    function isAsyncMode(object) {
    	      {
    	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
    	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

    	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    	        }
    	      }
    	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    	    }
    	    function isConcurrentMode(object) {
    	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    	    }
    	    function isContextConsumer(object) {
    	      return typeOf(object) === REACT_CONTEXT_TYPE;
    	    }
    	    function isContextProvider(object) {
    	      return typeOf(object) === REACT_PROVIDER_TYPE;
    	    }
    	    function isElement(object) {
    	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    	    }
    	    function isForwardRef(object) {
    	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    	    }
    	    function isFragment(object) {
    	      return typeOf(object) === REACT_FRAGMENT_TYPE;
    	    }
    	    function isLazy(object) {
    	      return typeOf(object) === REACT_LAZY_TYPE;
    	    }
    	    function isMemo(object) {
    	      return typeOf(object) === REACT_MEMO_TYPE;
    	    }
    	    function isPortal(object) {
    	      return typeOf(object) === REACT_PORTAL_TYPE;
    	    }
    	    function isProfiler(object) {
    	      return typeOf(object) === REACT_PROFILER_TYPE;
    	    }
    	    function isStrictMode(object) {
    	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    	    }
    	    function isSuspense(object) {
    	      return typeOf(object) === REACT_SUSPENSE_TYPE;
    	    }
    	    reactIs_development$1.AsyncMode = AsyncMode;
    	    reactIs_development$1.ConcurrentMode = ConcurrentMode;
    	    reactIs_development$1.ContextConsumer = ContextConsumer;
    	    reactIs_development$1.ContextProvider = ContextProvider;
    	    reactIs_development$1.Element = Element;
    	    reactIs_development$1.ForwardRef = ForwardRef;
    	    reactIs_development$1.Fragment = Fragment;
    	    reactIs_development$1.Lazy = Lazy;
    	    reactIs_development$1.Memo = Memo;
    	    reactIs_development$1.Portal = Portal;
    	    reactIs_development$1.Profiler = Profiler;
    	    reactIs_development$1.StrictMode = StrictMode;
    	    reactIs_development$1.Suspense = Suspense;
    	    reactIs_development$1.isAsyncMode = isAsyncMode;
    	    reactIs_development$1.isConcurrentMode = isConcurrentMode;
    	    reactIs_development$1.isContextConsumer = isContextConsumer;
    	    reactIs_development$1.isContextProvider = isContextProvider;
    	    reactIs_development$1.isElement = isElement;
    	    reactIs_development$1.isForwardRef = isForwardRef;
    	    reactIs_development$1.isFragment = isFragment;
    	    reactIs_development$1.isLazy = isLazy;
    	    reactIs_development$1.isMemo = isMemo;
    	    reactIs_development$1.isPortal = isPortal;
    	    reactIs_development$1.isProfiler = isProfiler;
    	    reactIs_development$1.isStrictMode = isStrictMode;
    	    reactIs_development$1.isSuspense = isSuspense;
    	    reactIs_development$1.isValidElementType = isValidElementType;
    	    reactIs_development$1.typeOf = typeOf;
    	  })();
    	}
    	return reactIs_development$1;
    }

    (function (module) {

    	{
    	  module.exports = requireReactIs_development$1();
    	}
    } (reactIs$2));

    var reactIs$1 = reactIs$2.exports;

    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;
    function getStatics(component) {
      // React v16.11 and below
      if (reactIs$1.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above

      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              // Avoid failures from read-only properties
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }
      return targetComponent;
    }
    var hoistNonReactStatics_cjs = hoistNonReactStatics;

    function y() {
      return (y = Object.assign || function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = arguments[t];
          for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        }
        return e;
      }).apply(this, arguments);
    }
    var v = function (e, t) {
        for (var n = [e[0]], r = 0, o = t.length; r < o; r += 1) n.push(t[r], e[r + 1]);
        return n;
      },
      g = function (t) {
        return null !== t && "object" == typeof t && "[object Object]" === (t.toString ? t.toString() : Object.prototype.toString.call(t)) && !reactIs$3.exports.typeOf(t);
      },
      S = Object.freeze([]),
      w = Object.freeze({});
    function E(e) {
      return "function" == typeof e;
    }
    function b(e) {
      return "string" == typeof e && e || e.displayName || e.name || "Component";
    }
    function _(e) {
      return e && "string" == typeof e.styledComponentId;
    }
    var N = "undefined" != typeof process && void 0 !== process.env && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled",
      C = "undefined" != typeof window && "HTMLElement" in window,
      I = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && (void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : "production" !== 'development')),
      P = {},
      O = {
        1: "Cannot create styled-component for component: %s.\n\n",
        2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
        3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
        4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
        5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
        6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
        7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',
        8: 'ThemeProvider: Please make your "theme" prop an object.\n\n',
        9: "Missing document `<head>`\n\n",
        10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
        11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
        12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
        13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",
        14: 'ThemeProvider: "theme" prop is required.\n\n',
        15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",
        16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",
        17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"
      } ;
    function R() {
      for (var e = arguments.length <= 0 ? void 0 : arguments[0], t = [], n = 1, r = arguments.length; n < r; n += 1) t.push(n < 0 || arguments.length <= n ? void 0 : arguments[n]);
      return t.forEach(function (t) {
        e = e.replace(/%[a-z]/, t);
      }), e;
    }
    function D(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) n[r - 1] = arguments[r];
      throw new Error(R.apply(void 0, [O[e]].concat(n)).trim());
    }
    var j = function () {
        function e(e) {
          this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e;
        }
        var t = e.prototype;
        return t.indexOfGroup = function (e) {
          for (var t = 0, n = 0; n < e; n++) t += this.groupSizes[n];
          return t;
        }, t.insertRules = function (e, t) {
          if (e >= this.groupSizes.length) {
            for (var n = this.groupSizes, r = n.length, o = r; e >= o;) (o <<= 1) < 0 && D(16, "" + e);
            this.groupSizes = new Uint32Array(o), this.groupSizes.set(n), this.length = o;
            for (var s = r; s < o; s++) this.groupSizes[s] = 0;
          }
          for (var i = this.indexOfGroup(e + 1), a = 0, c = t.length; a < c; a++) this.tag.insertRule(i, t[a]) && (this.groupSizes[e]++, i++);
        }, t.clearGroup = function (e) {
          if (e < this.length) {
            var t = this.groupSizes[e],
              n = this.indexOfGroup(e),
              r = n + t;
            this.groupSizes[e] = 0;
            for (var o = n; o < r; o++) this.tag.deleteRule(n);
          }
        }, t.getGroup = function (e) {
          var t = "";
          if (e >= this.length || 0 === this.groupSizes[e]) return t;
          for (var n = this.groupSizes[e], r = this.indexOfGroup(e), o = r + n, s = r; s < o; s++) t += this.tag.getRule(s) + "/*!sc*/\n";
          return t;
        }, e;
      }(),
      T = new Map(),
      x = new Map(),
      k = 1,
      V = function (e) {
        if (T.has(e)) return T.get(e);
        for (; x.has(k);) k++;
        var t = k++;
        return ((0 | t) < 0 || t > 1 << 30) && D(16, "" + t), T.set(e, t), x.set(t, e), t;
      },
      B = function (e) {
        return x.get(e);
      },
      z = function (e, t) {
        t >= k && (k = t + 1), T.set(e, t), x.set(t, e);
      },
      M = "style[" + N + '][data-styled-version="5.3.11"]',
      G = new RegExp("^" + N + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),
      L = function (e, t, n) {
        for (var r, o = n.split(","), s = 0, i = o.length; s < i; s++) (r = o[s]) && e.registerName(t, r);
      },
      F = function (e, t) {
        for (var n = (t.textContent || "").split("/*!sc*/\n"), r = [], o = 0, s = n.length; o < s; o++) {
          var i = n[o].trim();
          if (i) {
            var a = i.match(G);
            if (a) {
              var c = 0 | parseInt(a[1], 10),
                u = a[2];
              0 !== c && (z(u, c), L(e, u, a[3]), e.getTag().insertRules(c, r)), r.length = 0;
            } else r.push(i);
          }
        }
      },
      Y = function () {
        return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
      },
      q = function (e) {
        var t = document.head,
          n = e || t,
          r = document.createElement("style"),
          o = function (e) {
            for (var t = e.childNodes, n = t.length; n >= 0; n--) {
              var r = t[n];
              if (r && 1 === r.nodeType && r.hasAttribute(N)) return r;
            }
          }(n),
          s = void 0 !== o ? o.nextSibling : null;
        r.setAttribute(N, "active"), r.setAttribute("data-styled-version", "5.3.11");
        var i = Y();
        return i && r.setAttribute("nonce", i), n.insertBefore(r, s), r;
      },
      H = function () {
        function e(e) {
          var t = this.element = q(e);
          t.appendChild(document.createTextNode("")), this.sheet = function (e) {
            if (e.sheet) return e.sheet;
            for (var t = document.styleSheets, n = 0, r = t.length; n < r; n++) {
              var o = t[n];
              if (o.ownerNode === e) return o;
            }
            D(17);
          }(t), this.length = 0;
        }
        var t = e.prototype;
        return t.insertRule = function (e, t) {
          try {
            return this.sheet.insertRule(t, e), this.length++, !0;
          } catch (e) {
            return !1;
          }
        }, t.deleteRule = function (e) {
          this.sheet.deleteRule(e), this.length--;
        }, t.getRule = function (e) {
          var t = this.sheet.cssRules[e];
          return void 0 !== t && "string" == typeof t.cssText ? t.cssText : "";
        }, e;
      }(),
      $ = function () {
        function e(e) {
          var t = this.element = q(e);
          this.nodes = t.childNodes, this.length = 0;
        }
        var t = e.prototype;
        return t.insertRule = function (e, t) {
          if (e <= this.length && e >= 0) {
            var n = document.createTextNode(t),
              r = this.nodes[e];
            return this.element.insertBefore(n, r || null), this.length++, !0;
          }
          return !1;
        }, t.deleteRule = function (e) {
          this.element.removeChild(this.nodes[e]), this.length--;
        }, t.getRule = function (e) {
          return e < this.length ? this.nodes[e].textContent : "";
        }, e;
      }(),
      W = function () {
        function e(e) {
          this.rules = [], this.length = 0;
        }
        var t = e.prototype;
        return t.insertRule = function (e, t) {
          return e <= this.length && (this.rules.splice(e, 0, t), this.length++, !0);
        }, t.deleteRule = function (e) {
          this.rules.splice(e, 1), this.length--;
        }, t.getRule = function (e) {
          return e < this.length ? this.rules[e] : "";
        }, e;
      }(),
      U = C,
      J = {
        isServer: !C,
        useCSSOMInjection: !I
      },
      X = function () {
        function e(e, t, n) {
          void 0 === e && (e = w), void 0 === t && (t = {}), this.options = y({}, J, {}, e), this.gs = t, this.names = new Map(n), this.server = !!e.isServer, !this.server && C && U && (U = !1, function (e) {
            for (var t = document.querySelectorAll(M), n = 0, r = t.length; n < r; n++) {
              var o = t[n];
              o && "active" !== o.getAttribute(N) && (F(e, o), o.parentNode && o.parentNode.removeChild(o));
            }
          }(this));
        }
        e.registerId = function (e) {
          return V(e);
        };
        var t = e.prototype;
        return t.reconstructWithOptions = function (t, n) {
          return void 0 === n && (n = !0), new e(y({}, this.options, {}, t), this.gs, n && this.names || void 0);
        }, t.allocateGSInstance = function (e) {
          return this.gs[e] = (this.gs[e] || 0) + 1;
        }, t.getTag = function () {
          return this.tag || (this.tag = (n = (t = this.options).isServer, r = t.useCSSOMInjection, o = t.target, e = n ? new W(o) : r ? new H(o) : new $(o), new j(e)));
          var e, t, n, r, o;
        }, t.hasNameForId = function (e, t) {
          return this.names.has(e) && this.names.get(e).has(t);
        }, t.registerName = function (e, t) {
          if (V(e), this.names.has(e)) this.names.get(e).add(t);else {
            var n = new Set();
            n.add(t), this.names.set(e, n);
          }
        }, t.insertRules = function (e, t, n) {
          this.registerName(e, t), this.getTag().insertRules(V(e), n);
        }, t.clearNames = function (e) {
          this.names.has(e) && this.names.get(e).clear();
        }, t.clearRules = function (e) {
          this.getTag().clearGroup(V(e)), this.clearNames(e);
        }, t.clearTag = function () {
          this.tag = void 0;
        }, t.toString = function () {
          return function (e) {
            for (var t = e.getTag(), n = t.length, r = "", o = 0; o < n; o++) {
              var s = B(o);
              if (void 0 !== s) {
                var i = e.names.get(s),
                  a = t.getGroup(o);
                if (i && a && i.size) {
                  var c = N + ".g" + o + '[id="' + s + '"]',
                    u = "";
                  void 0 !== i && i.forEach(function (e) {
                    e.length > 0 && (u += e + ",");
                  }), r += "" + a + c + '{content:"' + u + '"}/*!sc*/\n';
                }
              }
            }
            return r;
          }(this);
        }, e;
      }(),
      Z = /(a)(d)/gi,
      K = function (e) {
        return String.fromCharCode(e + (e > 25 ? 39 : 97));
      };
    function Q(e) {
      var t,
        n = "";
      for (t = Math.abs(e); t > 52; t = t / 52 | 0) n = K(t % 52) + n;
      return (K(t % 52) + n).replace(Z, "$1-$2");
    }
    var ee = function (e, t) {
        for (var n = t.length; n;) e = 33 * e ^ t.charCodeAt(--n);
        return e;
      },
      te = function (e) {
        return ee(5381, e);
      };
    function ne(e) {
      for (var t = 0; t < e.length; t += 1) {
        var n = e[t];
        if (E(n) && !_(n)) return !1;
      }
      return !0;
    }
    var re = te("5.3.11"),
      oe = function () {
        function e(e, t, n) {
          this.rules = e, this.staticRulesId = "", this.isStatic = "production" === 'development'  , this.componentId = t, this.baseHash = ee(re, t), this.baseStyle = n, X.registerId(t);
        }
        return e.prototype.generateAndInjectStyles = function (e, t, n) {
          var r = this.componentId,
            o = [];
          if (this.baseStyle && o.push(this.baseStyle.generateAndInjectStyles(e, t, n)), this.isStatic && !n.hash) {
            if (this.staticRulesId && t.hasNameForId(r, this.staticRulesId)) o.push(this.staticRulesId);else {
              var s = _e(this.rules, e, t, n).join(""),
                i = Q(ee(this.baseHash, s) >>> 0);
              if (!t.hasNameForId(r, i)) {
                var a = n(s, "." + i, void 0, r);
                t.insertRules(r, i, a);
              }
              o.push(i), this.staticRulesId = i;
            }
          } else {
            for (var c = this.rules.length, u = ee(this.baseHash, n.hash), l = "", d = 0; d < c; d++) {
              var h = this.rules[d];
              if ("string" == typeof h) l += h, (u = ee(u, h + d));else if (h) {
                var p = _e(h, e, t, n),
                  f = Array.isArray(p) ? p.join("") : p;
                u = ee(u, f + d), l += f;
              }
            }
            if (l) {
              var m = Q(u >>> 0);
              if (!t.hasNameForId(r, m)) {
                var y = n(l, "." + m, void 0, r);
                t.insertRules(r, m, y);
              }
              o.push(m);
            }
          }
          return o.join(" ");
        }, e;
      }(),
      se = /^\s*\/\/.*$/gm,
      ie = [":", "[", ".", "#"];
    function ae(e) {
      var t,
        n,
        r,
        o,
        s = void 0 === e ? w : e,
        i = s.options,
        a = void 0 === i ? w : i,
        c = s.plugins,
        u = void 0 === c ? S : c,
        l = new stylis_min(a),
        d = [],
        p = function (e) {
          function t(t) {
            if (t) try {
              e(t + "}");
            } catch (e) {}
          }
          return function (n, r, o, s, i, a, c, u, l, d) {
            switch (n) {
              case 1:
                if (0 === l && 64 === r.charCodeAt(0)) return e(r + ";"), "";
                break;
              case 2:
                if (0 === u) return r + "/*|*/";
                break;
              case 3:
                switch (u) {
                  case 102:
                  case 112:
                    return e(o[0] + r), "";
                  default:
                    return r + (0 === d ? "/*|*/" : "");
                }
              case -2:
                r.split("/*|*/}").forEach(t);
            }
          };
        }(function (e) {
          d.push(e);
        }),
        f = function (e, r, s) {
          return 0 === r && -1 !== ie.indexOf(s[n.length]) || s.match(o) ? e : "." + t;
        };
      function m(e, s, i, a) {
        void 0 === a && (a = "&");
        var c = e.replace(se, ""),
          u = s && i ? i + " " + s + " { " + c + " }" : c;
        return t = a, n = s, r = new RegExp("\\" + n + "\\b", "g"), o = new RegExp("(\\" + n + "\\b){2,}"), l(i || !s ? "" : s, u);
      }
      return l.use([].concat(u, [function (e, t, o) {
        2 === e && o.length && o[0].lastIndexOf(n) > 0 && (o[0] = o[0].replace(r, f));
      }, p, function (e) {
        if (-2 === e) {
          var t = d;
          return d = [], t;
        }
      }])), m.hash = u.length ? u.reduce(function (e, t) {
        return t.name || D(15), ee(e, t.name);
      }, 5381).toString() : "", m;
    }
    var ce = React__default["default"].createContext();
      ce.Consumer;
      var le = React__default["default"].createContext(),
      de = (le.Consumer, new X()),
      he = ae();
    function pe() {
      return React.useContext(ce) || de;
    }
    function fe() {
      return React.useContext(le) || he;
    }
    var ye = function () {
        function e(e, t) {
          var n = this;
          this.inject = function (e, t) {
            void 0 === t && (t = he);
            var r = n.name + t.hash;
            e.hasNameForId(n.id, r) || e.insertRules(n.id, r, t(n.rules, r, "@keyframes"));
          }, this.toString = function () {
            return D(12, String(n.name));
          }, this.name = e, this.id = "sc-keyframes-" + e, this.rules = t;
        }
        return e.prototype.getName = function (e) {
          return void 0 === e && (e = he), this.name + e.hash;
        }, e;
      }(),
      ve = /([A-Z])/,
      ge = /([A-Z])/g,
      Se = /^ms-/,
      we = function (e) {
        return "-" + e.toLowerCase();
      };
    function Ee(e) {
      return ve.test(e) ? e.replace(ge, we).replace(Se, "-ms-") : e;
    }
    var be = function (e) {
      return null == e || !1 === e || "" === e;
    };
    function _e(e, n, r, o) {
      if (Array.isArray(e)) {
        for (var s, i = [], a = 0, c = e.length; a < c; a += 1) "" !== (s = _e(e[a], n, r, o)) && (Array.isArray(s) ? i.push.apply(i, s) : i.push(s));
        return i;
      }
      if (be(e)) return "";
      if (_(e)) return "." + e.styledComponentId;
      if (E(e)) {
        if ("function" != typeof (l = e) || l.prototype && l.prototype.isReactComponent || !n) return e;
        var u = e(n);
        return reactIs$3.exports.isElement(u) && console.warn(b(e) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), _e(u, n, r, o);
      }
      var l;
      return e instanceof ye ? r ? (e.inject(r, o), e.getName(o)) : e : g(e) ? function e(t, n) {
        var r,
          o,
          s = [];
        for (var i in t) t.hasOwnProperty(i) && !be(t[i]) && (Array.isArray(t[i]) && t[i].isCss || E(t[i]) ? s.push(Ee(i) + ":", t[i], ";") : g(t[i]) ? s.push.apply(s, e(t[i], i)) : s.push(Ee(i) + ": " + (r = i, null == (o = t[i]) || "boolean" == typeof o || "" === o ? "" : "number" != typeof o || 0 === o || r in unitlessKeys || r.startsWith("--") ? String(o).trim() : o + "px") + ";"));
        return n ? [n + " {"].concat(s, ["}"]) : s;
      }(e) : e.toString();
    }
    var Ne = function (e) {
      return Array.isArray(e) && (e.isCss = !0), e;
    };
    function Ae(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) n[r - 1] = arguments[r];
      return E(e) || g(e) ? Ne(_e(v(S, [e].concat(n)))) : 0 === n.length && 1 === e.length && "string" == typeof e[0] ? e : Ne(_e(v(e, n)));
    }
    var Ce = /invalid hook call/i,
      Ie = new Set(),
      Pe = function (e, t) {
        {
          var n = "The component " + e + (t ? ' with the id of "' + t + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",
            r = console.error;
          try {
            var o = !0;
            console.error = function (e) {
              if (Ce.test(e)) o = !1, Ie.delete(n);else {
                for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++) s[i - 1] = arguments[i];
                r.apply(void 0, [e].concat(s));
              }
            }, React.useRef(), o && !Ie.has(n) && (console.warn(n), Ie.add(n));
          } catch (e) {
            Ce.test(e.message) && Ie.delete(n);
          } finally {
            console.error = r;
          }
        }
      },
      Oe = function (e, t, n) {
        return void 0 === n && (n = w), e.theme !== n.theme && e.theme || t || n.theme;
      },
      Re = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,
      De = /(^-|-$)/g;
    function je(e) {
      return e.replace(Re, "-").replace(De, "");
    }
    var Te = function (e) {
      return Q(te(e) >>> 0);
    };
    function xe(e) {
      return "string" == typeof e && (e.charAt(0) === e.charAt(0).toLowerCase());
    }
    var ke = function (e) {
        return "function" == typeof e || "object" == typeof e && null !== e && !Array.isArray(e);
      },
      Ve = function (e) {
        return "__proto__" !== e && "constructor" !== e && "prototype" !== e;
      };
    function Be(e, t, n) {
      var r = e[n];
      ke(t) && ke(r) ? ze(r, t) : e[n] = t;
    }
    function ze(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) n[r - 1] = arguments[r];
      for (var o = 0, s = n; o < s.length; o++) {
        var i = s[o];
        if (ke(i)) for (var a in i) Ve(a) && Be(e, i[a], a);
      }
      return e;
    }
    var Me = React__default["default"].createContext();
      Me.Consumer;
    var Fe = {};
    function Ye(e, t, n) {
      var o = _(e),
        i = !xe(e),
        a = t.attrs,
        c = void 0 === a ? S : a,
        l = t.componentId,
        d = void 0 === l ? function (e, t) {
          var n = "string" != typeof e ? "sc" : je(e);
          Fe[n] = (Fe[n] || 0) + 1;
          var r = n + "-" + Te("5.3.11" + n + Fe[n]);
          return t ? t + "-" + r : r;
        }(t.displayName, t.parentComponentId) : l,
        h = t.displayName,
        p = void 0 === h ? function (e) {
          return xe(e) ? "styled." + e : "Styled(" + b(e) + ")";
        }(e) : h,
        v = t.displayName && t.componentId ? je(t.displayName) + "-" + t.componentId : t.componentId || d,
        g = o && e.attrs ? Array.prototype.concat(e.attrs, c).filter(Boolean) : c,
        N = t.shouldForwardProp;
      o && e.shouldForwardProp && (N = t.shouldForwardProp ? function (n, r, o) {
        return e.shouldForwardProp(n, r, o) && t.shouldForwardProp(n, r, o);
      } : e.shouldForwardProp);
      var A,
        C = new oe(n, v, o ? e.componentStyle : void 0),
        I = C.isStatic && 0 === c.length,
        P = function (e, t) {
          return function (e, t, n, r) {
            var o = e.attrs,
              i = e.componentStyle,
              a = e.defaultProps,
              c = e.foldedComponentIds,
              l = e.shouldForwardProp,
              d = e.styledComponentId,
              h = e.target,
              p = function (e, t, n) {
                void 0 === e && (e = w);
                var r = y({}, t, {
                    theme: e
                  }),
                  o = {};
                return n.forEach(function (e) {
                  var t,
                    n,
                    s,
                    i = e;
                  for (t in E(i) && (i = i(r)), i) r[t] = o[t] = "className" === t ? (n = o[t], s = i[t], n && s ? n + " " + s : n || s) : i[t];
                }), [r, o];
              }(Oe(t, React.useContext(Me), a) || w, t, o),
              m = p[0],
              v = p[1],
              g = function (e, t, n, r) {
                var o = pe(),
                  s = fe(),
                  i = t ? e.generateAndInjectStyles(w, o, s) : e.generateAndInjectStyles(n, o, s);
                return !t && r && r(i), i;
              }(i, r, m, e.warnTooManyClasses ),
              S = n,
              b = v.$as || t.$as || v.as || t.as || h,
              _ = xe(b),
              N = v !== t ? y({}, t, {}, v) : t,
              A = {};
            for (var C in N) "$" !== C[0] && "as" !== C && ("forwardedAs" === C ? A.as = N[C] : (l ? l(C, isPropValid, b) : !_ || isPropValid(C)) && (A[C] = N[C]));
            return t.style && v.style !== t.style && (A.style = y({}, t.style, {}, v.style)), A.className = Array.prototype.concat(c, d, g !== d ? g : null, t.className, v.className).filter(Boolean).join(" "), A.ref = S, React.createElement(b, A);
          }(A, e, t, I);
        };
      return P.displayName = p, (A = React__default["default"].forwardRef(P)).attrs = g, A.componentStyle = C, A.displayName = p, A.shouldForwardProp = N, A.foldedComponentIds = o ? Array.prototype.concat(e.foldedComponentIds, e.styledComponentId) : S, A.styledComponentId = v, A.target = o ? e.target : e, A.withComponent = function (e) {
        var r = t.componentId,
          o = function (e, t) {
            if (null == e) return {};
            var n,
              r,
              o = {},
              s = Object.keys(e);
            for (r = 0; r < s.length; r++) n = s[r], t.indexOf(n) >= 0 || (o[n] = e[n]);
            return o;
          }(t, ["componentId"]),
          s = r && r + "-" + (xe(e) ? e : je(b(e)));
        return Ye(e, y({}, o, {
          attrs: g,
          componentId: s
        }), n);
      }, Object.defineProperty(A, "defaultProps", {
        get: function () {
          return this._foldedDefaultProps;
        },
        set: function (t) {
          this._foldedDefaultProps = o ? ze({}, e.defaultProps, t) : t;
        }
      }), (Pe(p, v), A.warnTooManyClasses = function (e, t) {
        var n = {},
          r = !1;
        return function (o) {
          if (!r && (n[o] = !0, Object.keys(n).length >= 200)) {
            var s = t ? ' with the id of "' + t + '"' : "";
            console.warn("Over 200 classes were generated for component " + e + s + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r = !0, n = {};
          }
        };
      }(p, v)), Object.defineProperty(A, "toString", {
        value: function () {
          return "." + A.styledComponentId;
        }
      }), i && hoistNonReactStatics_cjs(A, e, {
        attrs: !0,
        componentStyle: !0,
        displayName: !0,
        foldedComponentIds: !0,
        shouldForwardProp: !0,
        styledComponentId: !0,
        target: !0,
        withComponent: !0
      }), A;
    }
    var qe = function (e) {
      return function e(t, r, o) {
        if (void 0 === o && (o = w), !reactIs$3.exports.isValidElementType(r)) return D(1, String(r));
        var s = function () {
          return t(r, o, Ae.apply(void 0, arguments));
        };
        return s.withConfig = function (n) {
          return e(t, r, y({}, o, {}, n));
        }, s.attrs = function (n) {
          return e(t, r, y({}, o, {
            attrs: Array.prototype.concat(o.attrs, n).filter(Boolean)
          }));
        }, s;
      }(Ye, e);
    };
    ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function (e) {
      qe[e] = qe(e);
    });
    var He = function () {
      function e(e, t) {
        this.rules = e, this.componentId = t, this.isStatic = ne(e), X.registerId(this.componentId + 1);
      }
      var t = e.prototype;
      return t.createStyles = function (e, t, n, r) {
        var o = r(_e(this.rules, t, n, r).join(""), ""),
          s = this.componentId + e;
        n.insertRules(s, s, o);
      }, t.removeStyles = function (e, t) {
        t.clearRules(this.componentId + e);
      }, t.renderStyles = function (e, t, n, r) {
        e > 2 && X.registerId(this.componentId + e), this.removeStyles(e, n), this.createStyles(e, t, n, r);
      }, e;
    }();
    function $e(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) n[o - 1] = arguments[o];
      var i = Ae.apply(void 0, [e].concat(n)),
        a = "sc-global-" + Te(JSON.stringify(i)),
        u = new He(i, a);
      function d(e) {
        var t = pe(),
          n = fe(),
          o = React.useContext(Me),
          d = React.useRef(t.allocateGSInstance(a)).current;
        return React__default["default"].Children.count(e.children) && console.warn("The global style component " + a + " was given child JSX. createGlobalStyle does not render children."), i.some(function (e) {
          return "string" == typeof e && -1 !== e.indexOf("@import");
        }) && console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."), t.server && h(d, e, t, o, n), React.useLayoutEffect(function () {
          if (!t.server) return h(d, e, t, o, n), function () {
            return u.removeStyles(d, t);
          };
        }, [d, e, t, o, n]), null;
      }
      function h(e, t, n, r, o) {
        if (u.isStatic) u.renderStyles(e, P, n, o);else {
          var s = y({}, t, {
            theme: Oe(t, r, d.defaultProps)
          });
          u.renderStyles(e, s, n, o);
        }
      }
      return Pe(a), React__default["default"].memo(d);
    }
    "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), "undefined" != typeof window && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, 1 === window["__styled-components-init__"] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);

    var propTypes$1 = {exports: {}};

    var reactIs = {exports: {}};

    var reactIs_development = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var hasRequiredReactIs_development;

    function requireReactIs_development () {
    	if (hasRequiredReactIs_development) return reactIs_development;
    	hasRequiredReactIs_development = 1;

    	{
    	  (function () {

    	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    	    // nor polyfill, then a plain number is used for performance.
    	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    	    // (unstable) APIs that have been removed. Can we remove the symbols?

    	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    	    function isValidElementType(type) {
    	      return typeof type === 'string' || typeof type === 'function' ||
    	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    	    }
    	    function typeOf(object) {
    	      if (typeof object === 'object' && object !== null) {
    	        var $$typeof = object.$$typeof;
    	        switch ($$typeof) {
    	          case REACT_ELEMENT_TYPE:
    	            var type = object.type;
    	            switch (type) {
    	              case REACT_ASYNC_MODE_TYPE:
    	              case REACT_CONCURRENT_MODE_TYPE:
    	              case REACT_FRAGMENT_TYPE:
    	              case REACT_PROFILER_TYPE:
    	              case REACT_STRICT_MODE_TYPE:
    	              case REACT_SUSPENSE_TYPE:
    	                return type;
    	              default:
    	                var $$typeofType = type && type.$$typeof;
    	                switch ($$typeofType) {
    	                  case REACT_CONTEXT_TYPE:
    	                  case REACT_FORWARD_REF_TYPE:
    	                  case REACT_LAZY_TYPE:
    	                  case REACT_MEMO_TYPE:
    	                  case REACT_PROVIDER_TYPE:
    	                    return $$typeofType;
    	                  default:
    	                    return $$typeof;
    	                }
    	            }
    	          case REACT_PORTAL_TYPE:
    	            return $$typeof;
    	        }
    	      }
    	      return undefined;
    	    } // AsyncMode is deprecated along with isAsyncMode

    	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    	    var ContextConsumer = REACT_CONTEXT_TYPE;
    	    var ContextProvider = REACT_PROVIDER_TYPE;
    	    var Element = REACT_ELEMENT_TYPE;
    	    var ForwardRef = REACT_FORWARD_REF_TYPE;
    	    var Fragment = REACT_FRAGMENT_TYPE;
    	    var Lazy = REACT_LAZY_TYPE;
    	    var Memo = REACT_MEMO_TYPE;
    	    var Portal = REACT_PORTAL_TYPE;
    	    var Profiler = REACT_PROFILER_TYPE;
    	    var StrictMode = REACT_STRICT_MODE_TYPE;
    	    var Suspense = REACT_SUSPENSE_TYPE;
    	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    	    function isAsyncMode(object) {
    	      {
    	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
    	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

    	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    	        }
    	      }
    	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    	    }
    	    function isConcurrentMode(object) {
    	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    	    }
    	    function isContextConsumer(object) {
    	      return typeOf(object) === REACT_CONTEXT_TYPE;
    	    }
    	    function isContextProvider(object) {
    	      return typeOf(object) === REACT_PROVIDER_TYPE;
    	    }
    	    function isElement(object) {
    	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    	    }
    	    function isForwardRef(object) {
    	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    	    }
    	    function isFragment(object) {
    	      return typeOf(object) === REACT_FRAGMENT_TYPE;
    	    }
    	    function isLazy(object) {
    	      return typeOf(object) === REACT_LAZY_TYPE;
    	    }
    	    function isMemo(object) {
    	      return typeOf(object) === REACT_MEMO_TYPE;
    	    }
    	    function isPortal(object) {
    	      return typeOf(object) === REACT_PORTAL_TYPE;
    	    }
    	    function isProfiler(object) {
    	      return typeOf(object) === REACT_PROFILER_TYPE;
    	    }
    	    function isStrictMode(object) {
    	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    	    }
    	    function isSuspense(object) {
    	      return typeOf(object) === REACT_SUSPENSE_TYPE;
    	    }
    	    reactIs_development.AsyncMode = AsyncMode;
    	    reactIs_development.ConcurrentMode = ConcurrentMode;
    	    reactIs_development.ContextConsumer = ContextConsumer;
    	    reactIs_development.ContextProvider = ContextProvider;
    	    reactIs_development.Element = Element;
    	    reactIs_development.ForwardRef = ForwardRef;
    	    reactIs_development.Fragment = Fragment;
    	    reactIs_development.Lazy = Lazy;
    	    reactIs_development.Memo = Memo;
    	    reactIs_development.Portal = Portal;
    	    reactIs_development.Profiler = Profiler;
    	    reactIs_development.StrictMode = StrictMode;
    	    reactIs_development.Suspense = Suspense;
    	    reactIs_development.isAsyncMode = isAsyncMode;
    	    reactIs_development.isConcurrentMode = isConcurrentMode;
    	    reactIs_development.isContextConsumer = isContextConsumer;
    	    reactIs_development.isContextProvider = isContextProvider;
    	    reactIs_development.isElement = isElement;
    	    reactIs_development.isForwardRef = isForwardRef;
    	    reactIs_development.isFragment = isFragment;
    	    reactIs_development.isLazy = isLazy;
    	    reactIs_development.isMemo = isMemo;
    	    reactIs_development.isPortal = isPortal;
    	    reactIs_development.isProfiler = isProfiler;
    	    reactIs_development.isStrictMode = isStrictMode;
    	    reactIs_development.isSuspense = isSuspense;
    	    reactIs_development.isValidElementType = isValidElementType;
    	    reactIs_development.typeOf = typeOf;
    	  })();
    	}
    	return reactIs_development;
    }

    var hasRequiredReactIs;

    function requireReactIs () {
    	if (hasRequiredReactIs) return reactIs.exports;
    	hasRequiredReactIs = 1;
    	(function (module) {

    		{
    		  module.exports = requireReactIs_development();
    		}
    } (reactIs));
    	return reactIs.exports;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret_1;
    var hasRequiredReactPropTypesSecret;

    function requireReactPropTypesSecret () {
    	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
    	hasRequiredReactPropTypesSecret = 1;

    	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    	ReactPropTypesSecret_1 = ReactPropTypesSecret;
    	return ReactPropTypesSecret_1;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var checkPropTypes_1;
    var hasRequiredCheckPropTypes;

    function requireCheckPropTypes () {
    	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
    	hasRequiredCheckPropTypes = 1;

    	var printWarning = function () {};
    	{
    	  var ReactPropTypesSecret = requireReactPropTypesSecret();
    	  var loggedTypeFailures = {};
    	  var has = Function.call.bind(Object.prototype.hasOwnProperty);
    	  printWarning = function (text) {
    	    var message = 'Warning: ' + text;
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {}
    	  };
    	}

    	/**
    	 * Assert that the values match with the type specs.
    	 * Error messages are memorized and will only be shown once.
    	 *
    	 * @param {object} typeSpecs Map of name to a ReactPropType
    	 * @param {object} values Runtime values that need to be type-checked
    	 * @param {string} location e.g. "prop", "context", "child context"
    	 * @param {string} componentName Name of the component for error messages.
    	 * @param {?Function} getStack Returns the component stack.
    	 * @private
    	 */
    	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    	  {
    	    for (var typeSpecName in typeSpecs) {
    	      if (has(typeSpecs, typeSpecName)) {
    	        var error;
    	        // Prop type validation may throw. In case they do, we don't want to
    	        // fail the render phase where it didn't fail before. So we log it.
    	        // After these have been cleaned up, we'll let them throw.
    	        try {
    	          // This is intentionally an invariant that gets caught. It's the same
    	          // behavior as without this statement except with a better message.
    	          if (typeof typeSpecs[typeSpecName] !== 'function') {
    	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
    	            err.name = 'Invariant Violation';
    	            throw err;
    	          }
    	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
    	        } catch (ex) {
    	          error = ex;
    	        }
    	        if (error && !(error instanceof Error)) {
    	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
    	        }
    	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
    	          // Only monitor this failure once because there tends to be a lot of the
    	          // same error.
    	          loggedTypeFailures[error.message] = true;
    	          var stack = getStack ? getStack() : '';
    	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
    	        }
    	      }
    	    }
    	  }
    	}

    	/**
    	 * Resets warning cache when testing.
    	 *
    	 * @private
    	 */
    	checkPropTypes.resetWarningCache = function () {
    	  {
    	    loggedTypeFailures = {};
    	  }
    	};
    	checkPropTypes_1 = checkPropTypes;
    	return checkPropTypes_1;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var factoryWithTypeCheckers;
    var hasRequiredFactoryWithTypeCheckers;

    function requireFactoryWithTypeCheckers () {
    	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
    	hasRequiredFactoryWithTypeCheckers = 1;

    	var ReactIs = requireReactIs();
    	var assign = requireObjectAssign();
    	var ReactPropTypesSecret = requireReactPropTypesSecret();
    	var checkPropTypes = requireCheckPropTypes();
    	var has = Function.call.bind(Object.prototype.hasOwnProperty);
    	var printWarning = function () {};
    	{
    	  printWarning = function (text) {
    	    var message = 'Warning: ' + text;
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {}
    	  };
    	}
    	function emptyFunctionThatReturnsNull() {
    	  return null;
    	}
    	factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
    	  /* global Symbol */
    	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    	  /**
    	   * Returns the iterator method function contained on the iterable object.
    	   *
    	   * Be sure to invoke the function with the iterable as context:
    	   *
    	   *     var iteratorFn = getIteratorFn(myIterable);
    	   *     if (iteratorFn) {
    	   *       var iterator = iteratorFn.call(myIterable);
    	   *       ...
    	   *     }
    	   *
    	   * @param {?object} maybeIterable
    	   * @return {?function}
    	   */
    	  function getIteratorFn(maybeIterable) {
    	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    	    if (typeof iteratorFn === 'function') {
    	      return iteratorFn;
    	    }
    	  }

    	  /**
    	   * Collection of methods that allow declaration and validation of props that are
    	   * supplied to React components. Example usage:
    	   *
    	   *   var Props = require('ReactPropTypes');
    	   *   var MyArticle = React.createClass({
    	   *     propTypes: {
    	   *       // An optional string prop named "description".
    	   *       description: Props.string,
    	   *
    	   *       // A required enum prop named "category".
    	   *       category: Props.oneOf(['News','Photos']).isRequired,
    	   *
    	   *       // A prop named "dialog" that requires an instance of Dialog.
    	   *       dialog: Props.instanceOf(Dialog).isRequired
    	   *     },
    	   *     render: function() { ... }
    	   *   });
    	   *
    	   * A more formal specification of how these methods are used:
    	   *
    	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
    	   *   decl := ReactPropTypes.{type}(.isRequired)?
    	   *
    	   * Each and every declaration produces a function with the same signature. This
    	   * allows the creation of custom validation functions. For example:
    	   *
    	   *  var MyLink = React.createClass({
    	   *    propTypes: {
    	   *      // An optional string or URI prop named "href".
    	   *      href: function(props, propName, componentName) {
    	   *        var propValue = props[propName];
    	   *        if (propValue != null && typeof propValue !== 'string' &&
    	   *            !(propValue instanceof URI)) {
    	   *          return new Error(
    	   *            'Expected a string or an URI for ' + propName + ' in ' +
    	   *            componentName
    	   *          );
    	   *        }
    	   *      }
    	   *    },
    	   *    render: function() {...}
    	   *  });
    	   *
    	   * @internal
    	   */

    	  var ANONYMOUS = '<<anonymous>>';

    	  // Important!
    	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    	  var ReactPropTypes = {
    	    array: createPrimitiveTypeChecker('array'),
    	    bool: createPrimitiveTypeChecker('boolean'),
    	    func: createPrimitiveTypeChecker('function'),
    	    number: createPrimitiveTypeChecker('number'),
    	    object: createPrimitiveTypeChecker('object'),
    	    string: createPrimitiveTypeChecker('string'),
    	    symbol: createPrimitiveTypeChecker('symbol'),
    	    any: createAnyTypeChecker(),
    	    arrayOf: createArrayOfTypeChecker,
    	    element: createElementTypeChecker(),
    	    elementType: createElementTypeTypeChecker(),
    	    instanceOf: createInstanceTypeChecker,
    	    node: createNodeChecker(),
    	    objectOf: createObjectOfTypeChecker,
    	    oneOf: createEnumTypeChecker,
    	    oneOfType: createUnionTypeChecker,
    	    shape: createShapeTypeChecker,
    	    exact: createStrictShapeTypeChecker
    	  };

    	  /**
    	   * inlined Object.is polyfill to avoid requiring consumers ship their own
    	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    	   */
    	  /*eslint-disable no-self-compare*/
    	  function is(x, y) {
    	    // SameValue algorithm
    	    if (x === y) {
    	      // Steps 1-5, 7-10
    	      // Steps 6.b-6.e: +0 != -0
    	      return x !== 0 || 1 / x === 1 / y;
    	    } else {
    	      // Step 6.a: NaN == NaN
    	      return x !== x && y !== y;
    	    }
    	  }
    	  /*eslint-enable no-self-compare*/

    	  /**
    	   * We use an Error-like object for backward compatibility as people may call
    	   * PropTypes directly and inspect their output. However, we don't use real
    	   * Errors anymore. We don't inspect their stack anyway, and creating them
    	   * is prohibitively expensive if they are created too often, such as what
    	   * happens in oneOfType() for any type before the one that matched.
    	   */
    	  function PropTypeError(message) {
    	    this.message = message;
    	    this.stack = '';
    	  }
    	  // Make `instanceof Error` still work for returned errors.
    	  PropTypeError.prototype = Error.prototype;
    	  function createChainableTypeChecker(validate) {
    	    {
    	      var manualPropTypeCallCache = {};
    	      var manualPropTypeWarningCount = 0;
    	    }
    	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    	      componentName = componentName || ANONYMOUS;
    	      propFullName = propFullName || propName;
    	      if (secret !== ReactPropTypesSecret) {
    	        if (throwOnDirectAccess) {
    	          // New behavior only for users of `prop-types` package
    	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    	          err.name = 'Invariant Violation';
    	          throw err;
    	        } else if (typeof console !== 'undefined') {
    	          // Old behavior for people using React.PropTypes
    	          var cacheKey = componentName + ':' + propName;
    	          if (!manualPropTypeCallCache[cacheKey] &&
    	          // Avoid spamming the console because they are often not actionable except for lib authors
    	          manualPropTypeWarningCount < 3) {
    	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
    	            manualPropTypeCallCache[cacheKey] = true;
    	            manualPropTypeWarningCount++;
    	          }
    	        }
    	      }
    	      if (props[propName] == null) {
    	        if (isRequired) {
    	          if (props[propName] === null) {
    	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
    	          }
    	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
    	        }
    	        return null;
    	      } else {
    	        return validate(props, propName, componentName, location, propFullName);
    	      }
    	    }
    	    var chainedCheckType = checkType.bind(null, false);
    	    chainedCheckType.isRequired = checkType.bind(null, true);
    	    return chainedCheckType;
    	  }
    	  function createPrimitiveTypeChecker(expectedType) {
    	    function validate(props, propName, componentName, location, propFullName, secret) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== expectedType) {
    	        // `propValue` being instance of, say, date/regexp, pass the 'object'
    	        // check, but we can offer a more precise error message here rather than
    	        // 'of type `object`'.
    	        var preciseType = getPreciseType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createAnyTypeChecker() {
    	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    	  }
    	  function createArrayOfTypeChecker(typeChecker) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (typeof typeChecker !== 'function') {
    	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    	      }
    	      var propValue = props[propName];
    	      if (!Array.isArray(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    	      }
    	      for (var i = 0; i < propValue.length; i++) {
    	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
    	        if (error instanceof Error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createElementTypeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      if (!isValidElement(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createElementTypeTypeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      if (!ReactIs.isValidElementType(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createInstanceTypeChecker(expectedClass) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (!(props[propName] instanceof expectedClass)) {
    	        var expectedClassName = expectedClass.name || ANONYMOUS;
    	        var actualClassName = getClassName(props[propName]);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createEnumTypeChecker(expectedValues) {
    	    if (!Array.isArray(expectedValues)) {
    	      {
    	        if (arguments.length > 1) {
    	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
    	        } else {
    	          printWarning('Invalid argument supplied to oneOf, expected an array.');
    	        }
    	      }
    	      return emptyFunctionThatReturnsNull;
    	    }
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      for (var i = 0; i < expectedValues.length; i++) {
    	        if (is(propValue, expectedValues[i])) {
    	          return null;
    	        }
    	      }
    	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
    	        var type = getPreciseType(value);
    	        if (type === 'symbol') {
    	          return String(value);
    	        }
    	        return value;
    	      });
    	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createObjectOfTypeChecker(typeChecker) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (typeof typeChecker !== 'function') {
    	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    	      }
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    	      }
    	      for (var key in propValue) {
    	        if (has(propValue, key)) {
    	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	          if (error instanceof Error) {
    	            return error;
    	          }
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createUnionTypeChecker(arrayOfTypeCheckers) {
    	    if (!Array.isArray(arrayOfTypeCheckers)) {
    	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
    	      return emptyFunctionThatReturnsNull;
    	    }
    	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
    	      var checker = arrayOfTypeCheckers[i];
    	      if (typeof checker !== 'function') {
    	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
    	        return emptyFunctionThatReturnsNull;
    	      }
    	    }
    	    function validate(props, propName, componentName, location, propFullName) {
    	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
    	        var checker = arrayOfTypeCheckers[i];
    	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
    	          return null;
    	        }
    	      }
    	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createNodeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (!isNode(props[propName])) {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createShapeTypeChecker(shapeTypes) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    	      }
    	      for (var key in shapeTypes) {
    	        var checker = shapeTypes[key];
    	        if (!checker) {
    	          continue;
    	        }
    	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	        if (error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createStrictShapeTypeChecker(shapeTypes) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    	      }
    	      // We need to check all keys in case some are required but missing from
    	      // props.
    	      var allKeys = assign({}, props[propName], shapeTypes);
    	      for (var key in allKeys) {
    	        var checker = shapeTypes[key];
    	        if (!checker) {
    	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
    	        }
    	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	        if (error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function isNode(propValue) {
    	    switch (typeof propValue) {
    	      case 'number':
    	      case 'string':
    	      case 'undefined':
    	        return true;
    	      case 'boolean':
    	        return !propValue;
    	      case 'object':
    	        if (Array.isArray(propValue)) {
    	          return propValue.every(isNode);
    	        }
    	        if (propValue === null || isValidElement(propValue)) {
    	          return true;
    	        }
    	        var iteratorFn = getIteratorFn(propValue);
    	        if (iteratorFn) {
    	          var iterator = iteratorFn.call(propValue);
    	          var step;
    	          if (iteratorFn !== propValue.entries) {
    	            while (!(step = iterator.next()).done) {
    	              if (!isNode(step.value)) {
    	                return false;
    	              }
    	            }
    	          } else {
    	            // Iterator will provide entry [k,v] tuples rather than values.
    	            while (!(step = iterator.next()).done) {
    	              var entry = step.value;
    	              if (entry) {
    	                if (!isNode(entry[1])) {
    	                  return false;
    	                }
    	              }
    	            }
    	          }
    	        } else {
    	          return false;
    	        }
    	        return true;
    	      default:
    	        return false;
    	    }
    	  }
    	  function isSymbol(propType, propValue) {
    	    // Native Symbol.
    	    if (propType === 'symbol') {
    	      return true;
    	    }

    	    // falsy value can't be a Symbol
    	    if (!propValue) {
    	      return false;
    	    }

    	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    	    if (propValue['@@toStringTag'] === 'Symbol') {
    	      return true;
    	    }

    	    // Fallback for non-spec compliant Symbols which are polyfilled.
    	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    	      return true;
    	    }
    	    return false;
    	  }

    	  // Equivalent of `typeof` but with special handling for array and regexp.
    	  function getPropType(propValue) {
    	    var propType = typeof propValue;
    	    if (Array.isArray(propValue)) {
    	      return 'array';
    	    }
    	    if (propValue instanceof RegExp) {
    	      // Old webkits (at least until Android 4.0) return 'function' rather than
    	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    	      // passes PropTypes.object.
    	      return 'object';
    	    }
    	    if (isSymbol(propType, propValue)) {
    	      return 'symbol';
    	    }
    	    return propType;
    	  }

    	  // This handles more types than `getPropType`. Only used for error messages.
    	  // See `createPrimitiveTypeChecker`.
    	  function getPreciseType(propValue) {
    	    if (typeof propValue === 'undefined' || propValue === null) {
    	      return '' + propValue;
    	    }
    	    var propType = getPropType(propValue);
    	    if (propType === 'object') {
    	      if (propValue instanceof Date) {
    	        return 'date';
    	      } else if (propValue instanceof RegExp) {
    	        return 'regexp';
    	      }
    	    }
    	    return propType;
    	  }

    	  // Returns a string that is postfixed to a warning about an invalid type.
    	  // For example, "undefined" or "of type array"
    	  function getPostfixForTypeWarning(value) {
    	    var type = getPreciseType(value);
    	    switch (type) {
    	      case 'array':
    	      case 'object':
    	        return 'an ' + type;
    	      case 'boolean':
    	      case 'date':
    	      case 'regexp':
    	        return 'a ' + type;
    	      default:
    	        return type;
    	    }
    	  }

    	  // Returns class name of the object, if any.
    	  function getClassName(propValue) {
    	    if (!propValue.constructor || !propValue.constructor.name) {
    	      return ANONYMOUS;
    	    }
    	    return propValue.constructor.name;
    	  }
    	  ReactPropTypes.checkPropTypes = checkPropTypes;
    	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    	  ReactPropTypes.PropTypes = ReactPropTypes;
    	  return ReactPropTypes;
    	};
    	return factoryWithTypeCheckers;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      var ReactIs = requireReactIs();

      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess = true;
      propTypes$1.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _taggedTemplateLiteral(strings, raw) {
      if (!raw) {
        raw = strings.slice(0);
      }
      return Object.freeze(Object.defineProperties(strings, {
        raw: {
          value: Object.freeze(raw)
        }
      }));
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function () {};
          return {
            s: F,
            n: function () {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function (e) {
              throw e;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true,
        didErr = false,
        err;
      return {
        s: function () {
          it = it.call(o);
        },
        n: function () {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function (e) {
          didErr = true;
          err = e;
        },
        f: function () {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }
    var _templateObject$9;
    var GlobalStyle = $e(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteral(["\n  .focus-outline-hidden :focus {\n      outline: none;\n  }\n"])));
    var _templateObject$8;
    var SvgButton = qe.button(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteral(["\n  display: block;\n  padding: 0;\n  border: 0;\n  background: none;\n  font-size: 0;\n  cursor: ", ";\n"])), function (props) {
      return props.disabled ? 'not-allowed' : 'pointer';
    });
    var _templateObject$7, _templateObject2;
    var Label = qe.span(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteral(["\n  font-size: 12px;\n  line-height: 1;\n"])));
    function Arrow(_ref) {
      var className = _ref.className,
        onClick = _ref.onClick,
        inverted = _ref.inverted,
        label = _ref.label,
        disabled = _ref.disabled;
      return /*#__PURE__*/React__default["default"].createElement(SvgButton, {
        className: className,
        onClick: onClick,
        "data-tour-elem": "".concat(inverted ? 'right' : 'left', "-arrow"),
        disabled: disabled
      }, label ? /*#__PURE__*/React__default["default"].createElement(Label, null, label) : /*#__PURE__*/React__default["default"].createElement("svg", {
        viewBox: "0 0 18.4 14.4"
      }, /*#__PURE__*/React__default["default"].createElement("path", {
        d: inverted ? 'M17 7.2H1M10.8 1L17 7.2l-6.2 6.2' : 'M1.4 7.2h16M7.6 1L1.4 7.2l6.2 6.2',
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeMiterlimit: "10"
      })));
    }
    Arrow.propTypes = {
      className: propTypes$1.exports.string.isRequired,
      onClick: propTypes$1.exports.func.isRequired,
      inverted: propTypes$1.exports.bool,
      label: propTypes$1.exports.node,
      disabled: propTypes$1.exports.bool
    };
    var Arrow$1 = qe(Arrow)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  color: ", ";\n\n  ", ";\n  ", ";\n\n  &:hover {\n    color: ", ";\n  }\n"])), function (props) {
      return props.disabled ? '#caccce' : '#646464';
    }, function (props) {
      return props.inverted ? 'margin-left: 24px;' : 'margin-right: 24px;';
    }, function (props) {
      return !props.label && "\n    width: 16px;\n    height: 12px;\n    flex: 0 0 16px;\n  ";
    }, function (props) {
      return props.disabled ? '#caccce' : '#000';
    });
    var _templateObject$6;
    function Close(_ref) {
      var className = _ref.className,
        onClick = _ref.onClick,
        ariaLabel = _ref.ariaLabel;
      return /*#__PURE__*/React__default["default"].createElement(SvgButton, {
        className: className,
        onClick: onClick,
        "aria-label": ariaLabel
      }, /*#__PURE__*/React__default["default"].createElement("svg", {
        viewBox: "0 0 9.1 9.1",
        "aria-hidden": true,
        role: "presentation"
      }, /*#__PURE__*/React__default["default"].createElement("path", {
        fill: "currentColor",
        d: "M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
      })));
    }
    Close.propTypes = {
      className: propTypes$1.exports.string.isRequired,
      onClick: propTypes$1.exports.func.isRequired,
      ariaLabel: propTypes$1.exports.string
    };
    var StyledClose = qe(Close)(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 22px;\n  right: 22px;\n  width: 9px;\n  height: 9px;\n  color: #5e5e5e;\n  &:hover {\n    color: #000;\n  }\n"])));
    function getNodeRect(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(),
        top = _node$getBoundingClie.top,
        right = _node$getBoundingClie.right,
        bottom = _node$getBoundingClie.bottom,
        left = _node$getBoundingClie.left,
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;
      return {
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        width: width,
        height: height
      };
    }
    function getHighlightedRect(node, step) {
      if (!step.highlightedSelectors) {
        return getNodeRect(node);
      }
      var attrs = getNodeRect(node);
      var _iterator = _createForOfIteratorHelper(step.highlightedSelectors),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var selector = _step.value;
          var element = document.querySelector(selector);
          if (!element || element.style.display === 'none' || element.style.visibility === 'hidden') {
            continue;
          }
          var rect = getNodeRect(element);
          if (rect.top < attrs.top) {
            attrs.top = rect.top;
          }
          if (rect.right > attrs.right) {
            attrs.right = rect.right;
          }
          if (rect.bottom > attrs.bottom) {
            attrs.bottom = rect.bottom;
          }
          if (rect.left < attrs.left) {
            attrs.left = rect.left;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      attrs.width = attrs.right - attrs.left;
      attrs.height = attrs.bottom - attrs.top;
      return attrs;
    }
    function inView(_ref) {
      var top = _ref.top,
        right = _ref.right,
        bottom = _ref.bottom,
        left = _ref.left,
        w = _ref.w,
        h = _ref.h,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === void 0 ? 0 : _ref$threshold;
      return top >= 0 + threshold && left >= 0 + threshold && bottom <= h - threshold && right <= w - threshold;
    }
    function isBody(node) {
      return node === document.querySelector('body') || node === document.querySelector('html');
    }
    var isHoriz = function isHoriz(pos) {
      return /(left|right)/.test(pos);
    };
    var isOutsideX = function isOutsideX(val, windowWidth) {
      return val > windowWidth;
    };
    var isOutsideY = function isOutsideY(val, windowHeight) {
      return val > windowHeight;
    };
    var safe = function safe(sum) {
      return sum < 0 ? 0 : sum;
    };
    function bestPositionOf(positions) {
      return Object.keys(positions).map(function (p) {
        return {
          position: p,
          value: positions[p]
        };
      }).sort(function (a, b) {
        return b.value - a.value;
      }).map(function (p) {
        return p.position;
      });
    }
    var _templateObject$5;
    var Guide = qe.div(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\n  --reactour-accent: ", ";\n  ", "\n  position: fixed;\n  transition: transform 0.3s;\n  top: 0;\n  left: 0;\n  z-index: 1000000;\n\n  transform: ", ";\n"])), function (props) {
      return props.accentColor;
    }, function (props) {
      return props.defaultStyles ? "\n  max-width: 331px;\n  min-width: 150px;\n  padding-right: 40px;\n  border-radius: ".concat(props.rounded, "px;\n  background-color: #fff;\n  padding: 24px 30px;\n  box-shadow: 0 0.5em 3em rgba(0, 0, 0, 0.3);\n  color: inherit;\n  ") : '';
    }, function (props) {
      var targetTop = props.targetTop,
        targetRight = props.targetRight,
        targetBottom = props.targetBottom,
        targetLeft = props.targetLeft,
        windowWidth = props.windowWidth,
        windowHeight = props.windowHeight,
        helperWidth = props.helperWidth,
        helperHeight = props.helperHeight,
        helperPosition = props.helperPosition,
        padding = props.padding;
      var available = {
        left: targetLeft,
        right: windowWidth - targetRight,
        top: targetTop,
        bottom: windowHeight - targetBottom
      };
      var couldPositionAt = function couldPositionAt(position) {
        return available[position] > (isHoriz(position) ? helperWidth + padding * 2 : helperHeight + padding * 2);
      };
      var autoPosition = function autoPosition(coords) {
        var positionsOrder = bestPositionOf(available);
        for (var j = 0; j < positionsOrder.length; j++) {
          if (couldPositionAt(positionsOrder[j])) {
            return coords[positionsOrder[j]];
          }
        }
        return coords.center;
      };
      var pos = function pos(helperPosition) {
        if (Array.isArray(helperPosition)) {
          var isOutX = isOutsideX(helperPosition[0], windowWidth);
          var isOutY = isOutsideY(helperPosition[1], windowHeight);
          var warn = function warn(axis, num) {
            console.warn("".concat(axis, ":").concat(num, " is outside window, falling back to center"));
          };
          if (isOutX) warn('x', helperPosition[0]);
          if (isOutY) warn('y', helperPosition[1]);
          return [isOutX ? windowWidth / 2 - helperWidth / 2 : helperPosition[0], isOutY ? windowHeight / 2 - helperHeight / 2 : helperPosition[1]];
        }
        var hX = isOutsideX(targetLeft + helperWidth, windowWidth) ? isOutsideX(targetRight + padding, windowWidth) ? targetRight - helperWidth : targetRight - helperWidth + padding : targetLeft - padding;
        var x = hX > padding ? hX : padding;
        var hY = isOutsideY(targetTop + helperHeight, windowHeight) ? isOutsideY(targetBottom + padding, windowHeight) ? targetBottom - helperHeight : targetBottom - helperHeight + padding : targetTop - padding;
        var y = hY > padding ? hY : padding;
        var coords = {
          top: [x, targetTop - helperHeight - padding * 2],
          right: [targetRight + padding * 2, y],
          bottom: [x, targetBottom + padding * 2],
          left: [targetLeft - helperWidth - padding * 2, y],
          center: [windowWidth / 2 - helperWidth / 2, windowHeight / 2 - helperHeight / 2]
        };
        if (helperPosition === 'center' || couldPositionAt(helperPosition)) {
          return coords[helperPosition];
        }
        return autoPosition(coords);
      };
      var p = pos(helperPosition);
      return "translate(".concat(Math.round(p[0]), "px, ").concat(Math.round(p[1]), "px)");
    });
    var _templateObject$4;
    var Badge = qe.span(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n  position: absolute;\n  font-family: monospace;\n  background: var(--reactour-accent);\n  background: ", ";\n  height: 1.875em;\n  line-height: 2;\n  padding-left: 0.8125em;\n  padding-right: 0.8125em;\n  font-size: 1em;\n  border-radius: 1.625em;\n  color: white;\n  text-align: center;\n  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);\n  top: -0.8125em;\n  left: -0.8125em;\n"])), function (props) {
      return props.accentColor;
    });
    var _templateObject$3;
    var Controls = qe.div(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n  display: flex;\n  margin-top: 24px;\n  align-items: center;\n  justify-content: center;\n"])));
    var _templateObject$2;
    var Navigation = qe.nav(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n  counter-reset: dot;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n"])));
    var _templateObject$1;
    var Dot = qe.button(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n  counter-increment: dot;\n  width: 8px;\n  height: 8px;\n  border: ", ";\n\n  border-radius: 100%;\n  padding: 0;\n  display: block;\n  margin: 4px;\n  transition: opacity 0.3s, transform 0.3s;\n  cursor: ", ";\n  transform: scale(", ");\n\n  color: ", ";\n  background: ", ";\n\n  color: ", ";\n  background: ", ";\n\n  &:before {\n    content: counter(dot);\n    position: absolute;\n    bottom: calc(100% + 0.25em);\n    left: 50%;\n    opacity: 0;\n    transform: translate(-50%, 1em);\n    transition: 0.3s;\n    display: ", ";\n  }\n\n  &:hover {\n    background-color: currentColor;\n\n    &:before {\n      opacity: 0.5;\n      transform: translate(-50%, -2px);\n    }\n  }\n"])), function (props) {
      return props.current === props.index ? '0' : '1px solid #caccce';
    }, function (props) {
      return props.disabled ? 'not-allowed' : 'pointer';
    }, function (props) {
      return props.current === props.index ? 1.25 : 1;
    }, function (props) {
      return props.current === props.index ? 'var(--reactour-accent)' : '#caccce';
    }, function (props) {
      return props.current === props.index ? 'var(--reactour-accent)' : 'none';
    }, function (props) {
      return props.current === props.index ? props.accentColor : '#caccce';
    }, function (props) {
      return props.current === props.index ? props.accentColor : 'none';
    }, function (props) {
      return props.showNumber ? 'block' : 'none';
    });
    var _templateObject;
    var SvgMaskWrapper = qe.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  opacity: ", ";\n  color: ", ";\n  width: 100%;\n  left: 0;\n  top: 0;\n  height: 100%;\n  position: fixed;\n  z-index: 99999;\n  pointer-events: none;\n"])), function (props) {
      return !props.maskClassName && 0.7;
    }, function (props) {
      return !props.maskClassName && '#000';
    });
    function SvgMask(_ref) {
      var windowWidth = _ref.windowWidth,
        windowHeight = _ref.windowHeight,
        targetWidth = _ref.targetWidth,
        targetHeight = _ref.targetHeight,
        targetTop = _ref.targetTop,
        targetLeft = _ref.targetLeft,
        padding = _ref.padding,
        rounded = _ref.rounded,
        roundedStep = _ref.roundedStep,
        disableInteraction = _ref.disableInteraction,
        disableInteractionClassName = _ref.disableInteractionClassName,
        className = _ref.className,
        onClick = _ref.onClick,
        highlightedBorder = _ref.highlightedBorder;
      var width = safe(targetWidth + padding * 2);
      var height = safe(targetHeight + padding * 2);
      var top = safe(targetTop - padding);
      var left = safe(targetLeft - padding);
      var roundedRadius = roundedStep ? Math.min(width / 2, height / 2) : rounded;
      return /*#__PURE__*/React__default["default"].createElement(SvgMaskWrapper, {
        onClick: onClick,
        maskClassName: className
      }, /*#__PURE__*/React__default["default"].createElement("svg", {
        width: windowWidth,
        height: windowHeight,
        xmlns: "http://www.w3.org/2000/svg",
        className: className
      }, /*#__PURE__*/React__default["default"].createElement("defs", null, /*#__PURE__*/React__default["default"].createElement("mask", {
        id: "mask-main"
      }, /*#__PURE__*/React__default["default"].createElement("rect", {
        x: 0,
        y: 0,
        width: windowWidth,
        height: windowHeight,
        fill: "white"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: left,
        y: top,
        width: width,
        height: height,
        fill: "black"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: left - 1,
        y: top - 1,
        width: roundedRadius,
        height: roundedRadius,
        fill: "white"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        cx: left + roundedRadius,
        cy: top + roundedRadius,
        r: roundedRadius,
        fill: "black"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: left + width - roundedRadius + 1,
        y: top - 1,
        width: roundedRadius,
        height: roundedRadius,
        fill: "white"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        cx: left + width - roundedRadius,
        cy: top + roundedRadius,
        r: roundedRadius,
        fill: "black"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: left - 1,
        y: top + height - roundedRadius + 1,
        width: roundedRadius,
        height: roundedRadius,
        fill: "white"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        cx: left + roundedRadius,
        cy: top + height - roundedRadius,
        r: roundedRadius,
        fill: "black"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: left + width - roundedRadius + 1,
        y: top + height - roundedRadius + 1,
        width: roundedRadius,
        height: roundedRadius,
        fill: "white"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        cx: left + width - roundedRadius,
        cy: top + height - roundedRadius,
        r: roundedRadius,
        fill: "black "
      })), /*#__PURE__*/React__default["default"].createElement("clipPath", {
        id: "clip-path"
      }, /*#__PURE__*/React__default["default"].createElement("rect", {
        x: 0,
        y: 0,
        width: windowWidth,
        height: top
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: 0,
        y: top,
        width: left,
        height: height
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: targetLeft + targetWidth + padding,
        y: top,
        width: safe(windowWidth - targetWidth - left),
        height: height
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: 0,
        y: targetTop + targetHeight + padding,
        width: windowWidth,
        height: safe(windowHeight - targetHeight - top)
      }))), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: 0,
        y: 0,
        width: windowWidth,
        height: windowHeight,
        fill: "currentColor",
        mask: "url(#mask-main)"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: 0,
        y: 0,
        width: windowWidth,
        height: windowHeight,
        fill: "currentColor",
        clipPath: "url(#clip-path)",
        pointerEvents: "auto"
      }), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: left,
        y: top,
        width: width,
        height: height,
        pointerEvents: "auto",
        fill: "transparent",
        display: disableInteraction ? 'block' : 'none',
        className: disableInteractionClassName
      }), highlightedBorder && /*#__PURE__*/React__default["default"].createElement("rect", {
        x: safe(left + highlightedBorder.width / 2.0),
        y: safe(top + highlightedBorder.width / 2.0),
        width: safe(width - highlightedBorder.width),
        height: safe(height - highlightedBorder.width),
        pointerEvents: "auto",
        fill: "none",
        strokeWidth: highlightedBorder.width,
        stroke: highlightedBorder.color,
        rx: roundedRadius - 2
      })));
    }
    SvgMask.propTypes = {
      windowWidth: propTypes$1.exports.number.isRequired,
      windowHeight: propTypes$1.exports.number.isRequired,
      targetWidth: propTypes$1.exports.number.isRequired,
      targetHeight: propTypes$1.exports.number.isRequired,
      targetTop: propTypes$1.exports.number.isRequired,
      targetLeft: propTypes$1.exports.number.isRequired,
      padding: propTypes$1.exports.number.isRequired,
      rounded: propTypes$1.exports.number.isRequired,
      roundedStep: propTypes$1.exports.bool,
      disableInteraction: propTypes$1.exports.bool.isRequired,
      disableInteractionClassName: propTypes$1.exports.string.isRequired,
      highlightedBorder: propTypes$1.exports.shape({
        color: propTypes$1.exports.string.isRequired,
        width: propTypes$1.exports.number.isRequired
      })
    };
    var ReactourResizeObserver = function (_ref) {
      var step = _ref.step,
        refresh = _ref.refresh;
      var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        mutationsCounter = _useState2[0],
        setMutationsCounter = _useState2[1]; // only use to notify main logic below
      // that a resizeObservable has been added to DOM (or removed from it)

      React.useEffect(function () {
        if (!step.resizeObservables) {
          return;
        }
        var incrementMutationsCounterIfObservable = function incrementMutationsCounterIfObservable(nodes) {
          var _iterator = _createForOfIteratorHelper(nodes),
            _step;
          try {
            var _loop = function _loop() {
              var node = _step.value;
              if (!node.attributes) {
                return "continue";
              }
              var found = step.resizeObservables.find(function (observable) {
                return node.matches(observable) || node.querySelector(observable) != null;
              });
              if (found) {
                setMutationsCounter(mutationsCounter + 1);
              }
            };
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _ret = _loop();
              if (_ret === "continue") continue;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        };
        var mutationObserver = new MutationObserver(function (mutationsList) {
          var _iterator2 = _createForOfIteratorHelper(mutationsList),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var mutation = _step2.value;
              if (0 !== mutation.addedNodes.length) {
                incrementMutationsCounterIfObservable(mutation.addedNodes);
              }
              if (0 !== mutation.removedNodes.length) {
                incrementMutationsCounterIfObservable(mutation.removedNodes);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        });
        var observable = document.documentElement || document.body;
        var config = {
          childList: true,
          subtree: true
        };
        mutationObserver.observe(observable, config);
        return function () {
          mutationObserver.disconnect();
        };
      }, [step, mutationsCounter]); // the main logic is here

      React.useEffect(function () {
        if (!step.resizeObservables) {
          return;
        }
        var resizeObserver = new ResizeObserver(function (entries) {
          refresh();
        });
        var _iterator3 = _createForOfIteratorHelper(step.resizeObservables),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var observable = _step3.value;
            var element = document.querySelector(observable);
            if (element) {
              resizeObserver.observe(element);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return function () {
          resizeObserver.disconnect();
        };
      }, [step, mutationsCounter]);
      return null;
    };
    var ReactourMutationObserver = function (_ref) {
      var step = _ref.step,
        refresh = _ref.refresh;
      React.useEffect(function () {
        if (!step.mutationObservables) {
          return;
        }
        var refreshHighlightedRegionIfObservable = function refreshHighlightedRegionIfObservable(nodes) {
          var _iterator = _createForOfIteratorHelper(nodes),
            _step;
          try {
            var _loop = function _loop() {
              var node = _step.value;
              if (!node.attributes) {
                return "continue";
              }
              var found = step.mutationObservables.find(function (observable) {
                return node.matches(observable) || node.querySelector(observable) != null;
              });
              if (found) {
                refresh();
              }
            };
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _ret = _loop();
              if (_ret === "continue") continue;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        };
        var mutationObserver = new MutationObserver(function (mutationsList) {
          var _iterator2 = _createForOfIteratorHelper(mutationsList),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var mutation = _step2.value;
              if (0 !== mutation.addedNodes.length) {
                refreshHighlightedRegionIfObservable(mutation.addedNodes);
              }
              if (0 !== mutation.removedNodes.length) {
                refreshHighlightedRegionIfObservable(mutation.removedNodes);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        });
        var observable = document.documentElement || document.body;
        var config = {
          childList: true,
          subtree: true
        };
        mutationObserver.observe(observable, config);
        return function () {
          mutationObserver.disconnect();
        };
      }, [step]);
      return null;
    };
    function Portal(_ref) {
      var children = _ref.children;
      var ref = React.useRef(null);
      if (ref.current === null) {
        ref.current = document.createElement('div');
        ref.current.setAttribute('id', '___reactour');
      }
      React.useEffect(function () {
        document.body.appendChild(ref.current);
        return function () {
          document.body.removeChild(ref.current);
        };
      }, [ref]);
      return /*#__PURE__*/reactDom.createPortal(children, ref.current);
    }
    var propTypes = {
      disableFocusLock: propTypes$1.exports.bool,
      badgeContent: propTypes$1.exports.func,
      highlightedMaskClassName: propTypes$1.exports.string,
      children: propTypes$1.exports.oneOfType([propTypes$1.exports.node, propTypes$1.exports.element]),
      className: propTypes$1.exports.string,
      closeButtonAriaLabel: propTypes$1.exports.string,
      closeWithMask: propTypes$1.exports.bool,
      inViewThreshold: propTypes$1.exports.number,
      isOpen: propTypes$1.exports.bool.isRequired,
      lastStepNextButton: propTypes$1.exports.node,
      maskClassName: propTypes$1.exports.string,
      maskSpace: propTypes$1.exports.number,
      nextButton: propTypes$1.exports.node,
      onAfterOpen: propTypes$1.exports.func,
      onBeforeClose: propTypes$1.exports.func,
      onRequestClose: propTypes$1.exports.func,
      prevButton: propTypes$1.exports.node,
      scrollDuration: propTypes$1.exports.number,
      scrollOffset: propTypes$1.exports.number,
      showButtons: propTypes$1.exports.bool,
      showCloseButton: propTypes$1.exports.bool,
      showNavigation: propTypes$1.exports.bool,
      showNavigationNumber: propTypes$1.exports.bool,
      showNumber: propTypes$1.exports.bool,
      startAt: propTypes$1.exports.number,
      goToStep: propTypes$1.exports.number,
      getCurrentStep: propTypes$1.exports.func,
      nextStep: propTypes$1.exports.func,
      prevStep: propTypes$1.exports.func,
      steps: propTypes$1.exports.arrayOf(propTypes$1.exports.shape({
        selector: propTypes$1.exports.string,
        content: propTypes$1.exports.oneOfType([propTypes$1.exports.node, propTypes$1.exports.element, propTypes$1.exports.func]).isRequired,
        position: propTypes$1.exports.oneOfType([propTypes$1.exports.arrayOf(propTypes$1.exports.number), propTypes$1.exports.oneOf(['top', 'right', 'bottom', 'left', 'center'])]),
        action: propTypes$1.exports.func,
        style: propTypes$1.exports.object,
        stepInteraction: propTypes$1.exports.bool,
        navDotAriaLabel: propTypes$1.exports.string,
        roundedStep: propTypes$1.exports.bool
      })),
      update: propTypes$1.exports.string,
      updateDelay: propTypes$1.exports.number,
      disableInteraction: propTypes$1.exports.bool,
      disableDotsNavigation: propTypes$1.exports.bool,
      disableKeyboardNavigation: propTypes$1.exports.oneOfType([propTypes$1.exports.arrayOf(propTypes$1.exports.oneOf(['esc', 'right', 'left'])), propTypes$1.exports.bool]),
      rounded: propTypes$1.exports.number,
      accentColor: propTypes$1.exports.string,
      highlightedBorder: propTypes$1.exports.shape({
        color: propTypes$1.exports.string.isRequired,
        width: propTypes$1.exports.number.isRequired
      })
    };
    var defaultProps = {
      disableFocusLock: false,
      showNavigation: true,
      showNavigationNumber: true,
      showButtons: true,
      showCloseButton: true,
      closeButtonAriaLabel: 'Close',
      showNumber: true,
      scrollDuration: 1,
      maskSpace: 10,
      updateDelay: 1,
      disableInteraction: false,
      rounded: 0,
      accentColor: '#007aff',
      closeWithMask: true
    };
    var CN = {
      mask: {
        base: 'reactour__mask',
        isOpen: 'reactour__mask--is-open',
        disableInteraction: 'reactour__mask--disable-interaction'
      },
      helper: {
        base: 'reactour__helper',
        isOpen: 'reactour__helper--is-open'
      },
      dot: {
        base: 'reactour__dot',
        active: 'reactour__dot--is-active'
      }
    };
    var Tour = /*#__PURE__*/function (_Component) {
      _inherits(Tour, _Component);
      var _super = _createSuper(Tour);
      function Tour() {
        var _this;
        _classCallCheck(this, Tour);
        _this = _super.call(this);
        _defineProperty(_assertThisInitialized(_this), "unlockFocus", function (callback) {
          _this.setState({
            focusUnlocked: true
          }, callback());
        });
        _defineProperty(_assertThisInitialized(_this), "showStep", function () {
          if (!_this.helper || !_this.helper.current) return;
          var steps = _this.props.steps;
          var _this$state = _this.state,
            current = _this$state.current,
            focusUnlocked = _this$state.focusUnlocked;
          if (focusUnlocked) {
            _this.setState({
              focusUnlocked: false
            });
          }
          var step = steps[current];
          var node = step.selector ? document.querySelector(step.selector) : null;
          var stepCallback = function stepCallback(o) {
            if (step.action && typeof step.action === 'function') {
              _this.unlockFocus(function () {
                return step.action(o);
              });
            }
          };
          if (step.observe) {
            var target = document.querySelector(step.observe);
            var config = {
              attributes: true,
              childList: true,
              characterData: true
            };
            _this.setState(function (prevState) {
              if (prevState.observer) {
                setTimeout(function () {
                  prevState.observer.disconnect();
                }, 0);
              }
              return {
                observer: new MutationObserver(function (mutations) {
                  mutations.forEach(function (mutation) {
                    if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                      var cb = function cb() {
                        return stepCallback(mutation.addedNodes[0]);
                      };
                      setTimeout(function () {
                        return _this.calculateNode(mutation.addedNodes[0], step, cb);
                      }, 100);
                    } else if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {
                      var _cb = function _cb() {
                        return stepCallback(node);
                      };
                      _this.calculateNode(node, step, _cb);
                    }
                  });
                })
              };
            }, function () {
              return _this.state.observer.observe(target, config);
            });
          } else {
            if (_this.state.observer) {
              _this.state.observer.disconnect();
              _this.setState({
                observer: null
              });
            }
          }
          if (node) {
            var cb = function cb() {
              return stepCallback(node);
            };
            _this.calculateNode(node, step, cb);
          } else {
            _this.setState(setNodeState(null, step, _this.helper.current), stepCallback);
            step.selector && console.warn("Doesn't find a DOM node '".concat(step.selector, "'. Please check the 'steps' Tour prop Array at position ").concat(current, "."));
          }
        });
        _defineProperty(_assertThisInitialized(_this), "calculateNode", function (node, step, cb) {
          var _this$props = _this.props,
            scrollDuration = _this$props.scrollDuration,
            inViewThreshold = _this$props.inViewThreshold,
            scrollOffset = _this$props.scrollOffset;
          var attrs = getHighlightedRect(node, step);
          var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
          var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
          if (!inView(_objectSpread2(_objectSpread2({}, attrs), {}, {
            w: w,
            h: h,
            threshold: inViewThreshold
          }))) {
            var parentScroll = Scrollparent(node);
            var offset = scrollOffset ? scrollOffset : attrs.height > h ? -25 : -(h / 2) + attrs.height / 2;
            scrollSmooth.to(node, {
              context: isBody(parentScroll) ? window : parentScroll,
              duration: scrollDuration,
              offset: offset,
              callback: function callback(nd) {
                _this.setState(setNodeState(nd, step, _this.helper.current), cb);
              }
            });
          } else {
            _this.setState(setNodeState(node, step, _this.helper.current), cb);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "recalculateNode", function (step) {
          var node = document.querySelector(step.selector);
          var stepCallback = function stepCallback(o) {
            if (step.action && typeof step.action === 'function') {
              _this.unlockFocus(function () {
                return step.action(o);
              });
            }
          };
          _this.calculateNode(node, step, function () {
            return stepCallback(node);
          });
        });
        _defineProperty(_assertThisInitialized(_this), "maskClickHandler", function (e) {
          var _this$props2 = _this.props,
            closeWithMask = _this$props2.closeWithMask,
            onRequestClose = _this$props2.onRequestClose;
          if (closeWithMask && !e.target.classList.contains(CN.mask.disableInteraction)) {
            onRequestClose(e);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "nextStep", function () {
          var _this$props3 = _this.props,
            steps = _this$props3.steps,
            getCurrentStep = _this$props3.getCurrentStep;
          _this.setState(function (prevState) {
            var nextStep = prevState.current < steps.length - 1 ? prevState.current + 1 : prevState.current;
            if (typeof getCurrentStep === 'function') {
              getCurrentStep(nextStep);
            }
            return {
              current: nextStep
            };
          }, _this.showStep);
        });
        _defineProperty(_assertThisInitialized(_this), "prevStep", function () {
          var getCurrentStep = _this.props.getCurrentStep;
          _this.setState(function (prevState) {
            var nextStep = prevState.current > 0 ? prevState.current - 1 : prevState.current;
            if (typeof getCurrentStep === 'function') {
              getCurrentStep(nextStep);
            }
            return {
              current: nextStep
            };
          }, _this.showStep);
        });
        _defineProperty(_assertThisInitialized(_this), "gotoStep", function (n) {
          var _this$props4 = _this.props,
            steps = _this$props4.steps,
            getCurrentStep = _this$props4.getCurrentStep;
          _this.setState(function (prevState) {
            var nextStep = steps[n] ? n : prevState.current;
            if (typeof getCurrentStep === 'function') {
              getCurrentStep(nextStep);
            }
            return {
              current: nextStep
            };
          }, _this.showStep);
        });
        _defineProperty(_assertThisInitialized(_this), "keyDownHandler", function (e) {
          var _this$props5 = _this.props,
            onRequestClose = _this$props5.onRequestClose,
            nextStep = _this$props5.nextStep,
            prevStep = _this$props5.prevStep,
            disableKeyboardNavigation = _this$props5.disableKeyboardNavigation;
          e.stopPropagation();
          if (disableKeyboardNavigation === true) {
            return;
          }
          var isEscDisabled, isRightDisabled, isLeftDisabled;
          if (disableKeyboardNavigation) {
            isEscDisabled = disableKeyboardNavigation.includes('esc');
            isRightDisabled = disableKeyboardNavigation.includes('right');
            isLeftDisabled = disableKeyboardNavigation.includes('left');
          }
          if (e.keyCode === 27 && !isEscDisabled) {
            // esc
            e.preventDefault();
            onRequestClose();
          }
          if (e.keyCode === 39 && !isRightDisabled) {
            // right
            e.preventDefault();
            typeof nextStep === 'function' ? nextStep() : _this.nextStep();
          }
          if (e.keyCode === 37 && !isLeftDisabled) {
            // left
            e.preventDefault();
            typeof prevStep === 'function' ? prevStep() : _this.prevStep();
          }
        });
        _this.state = {
          isOpen: false,
          current: 0,
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          width: 0,
          height: 0,
          w: 0,
          h: 0,
          inDOM: false,
          observer: null,
          focusUnlocked: false
        };
        _this.helper = /*#__PURE__*/React.createRef();
        _this.helperElement = null;
        _this.debouncedShowStep = lodash_debounce(_this.showStep, 70);
        return _this;
      }
      _createClass(Tour, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this$props6 = this.props,
            isOpen = _this$props6.isOpen,
            startAt = _this$props6.startAt;
          if (isOpen) {
            this.open(startAt);
          }
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(nextProps) {
          var _this$props7 = this.props,
            isOpen = _this$props7.isOpen,
            update = _this$props7.update,
            updateDelay = _this$props7.updateDelay;
          if (!isOpen && nextProps.isOpen) {
            this.open(nextProps.startAt);
          } else if (isOpen && !nextProps.isOpen) {
            this.close();
          }
          if (isOpen && update !== nextProps.update) {
            if (nextProps.steps[this.state.current]) {
              setTimeout(this.showStep, updateDelay);
            } else {
              this.props.onRequestClose();
            }
          }
          if (isOpen && nextProps.isOpen && this.state.current !== nextProps.goToStep) {
            this.gotoStep(nextProps.goToStep);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var isOpen = this.props.isOpen;
          if (isOpen) {
            this.close();
          }
          if (this.state.observer) {
            this.state.observer.disconnect();
          }
        }
      }, {
        key: "open",
        value: function open(startAt) {
          var _this2 = this;
          var onAfterOpen = this.props.onAfterOpen;
          this.setState(function (prevState) {
            return {
              isOpen: true,
              current: startAt !== undefined ? startAt : prevState.current
            };
          }, function () {
            setTimeout(_this2.showStep, 1);
            _this2.helperElement = _this2.helper.current;
            if (!_this2.props.disableFocusLock) _this2.helper.current.focus();
            if (onAfterOpen) {
              onAfterOpen(_this2.helperElement);
            }
          });
          window.addEventListener('resize', this.debouncedShowStep, false);
          window.addEventListener('keydown', this.keyDownHandler, false);
        }
      }, {
        key: "close",
        value: function close() {
          this.setState(function (prevState) {
            if (prevState.observer) {
              prevState.observer.disconnect();
            }
            return {
              isOpen: false,
              observer: null
            };
          }, this.onBeforeClose);
          window.removeEventListener('resize', this.debouncedShowStep);
          window.removeEventListener('keydown', this.keyDownHandler);
        }
      }, {
        key: "onBeforeClose",
        value: function onBeforeClose() {
          var onBeforeClose = this.props.onBeforeClose;
          if (onBeforeClose) {
            onBeforeClose(this.helperElement);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _this$props8 = this.props,
            className = _this$props8.className,
            steps = _this$props8.steps,
            maskClassName = _this$props8.maskClassName,
            showButtons = _this$props8.showButtons,
            showCloseButton = _this$props8.showCloseButton,
            closeButtonAriaLabel = _this$props8.closeButtonAriaLabel,
            showNavigation = _this$props8.showNavigation,
            showNavigationNumber = _this$props8.showNavigationNumber,
            showNumber = _this$props8.showNumber,
            onRequestClose = _this$props8.onRequestClose,
            maskSpace = _this$props8.maskSpace,
            lastStepNextButton = _this$props8.lastStepNextButton,
            nextButton = _this$props8.nextButton,
            prevButton = _this$props8.prevButton,
            badgeContent = _this$props8.badgeContent,
            highlightedMaskClassName = _this$props8.highlightedMaskClassName,
            disableInteraction = _this$props8.disableInteraction,
            disableDotsNavigation = _this$props8.disableDotsNavigation,
            nextStep = _this$props8.nextStep,
            prevStep = _this$props8.prevStep,
            rounded = _this$props8.rounded,
            accentColor = _this$props8.accentColor,
            CustomHelper = _this$props8.CustomHelper,
            disableFocusLock = _this$props8.disableFocusLock,
            highlightedBorder = _this$props8.highlightedBorder;
          var _this$state2 = this.state,
            isOpen = _this$state2.isOpen,
            current = _this$state2.current,
            inDOM = _this$state2.inDOM,
            targetTop = _this$state2.top,
            targetRight = _this$state2.right,
            targetBottom = _this$state2.bottom,
            targetLeft = _this$state2.left,
            targetWidth = _this$state2.width,
            targetHeight = _this$state2.height,
            windowWidth = _this$state2.w,
            windowHeight = _this$state2.h,
            helperWidth = _this$state2.helperWidth,
            helperHeight = _this$state2.helperHeight,
            helperPosition = _this$state2.helperPosition;
          if (isOpen) {
            return /*#__PURE__*/React__default["default"].createElement(Portal, null, /*#__PURE__*/React__default["default"].createElement(GlobalStyle, null), /*#__PURE__*/React__default["default"].createElement(ReactourResizeObserver, {
              step: steps[current],
              refresh: function refresh() {
                return _this3.recalculateNode(steps[current]);
              }
            }), /*#__PURE__*/React__default["default"].createElement(ReactourMutationObserver, {
              step: steps[current],
              refresh: function refresh() {
                return _this3.recalculateNode(steps[current]);
              }
            }), /*#__PURE__*/React__default["default"].createElement(SvgMask, {
              onClick: this.maskClickHandler,
              forwardRef: function forwardRef(c) {
                return _this3.mask = c;
              },
              windowWidth: windowWidth,
              windowHeight: windowHeight,
              targetWidth: targetWidth,
              targetHeight: targetHeight,
              targetTop: targetTop,
              targetLeft: targetLeft,
              padding: maskSpace,
              rounded: rounded,
              roundedStep: steps[current].roundedStep,
              className: maskClassName,
              disableInteraction: steps[current].stepInteraction === false || disableInteraction ? !steps[current].stepInteraction : disableInteraction,
              disableInteractionClassName: "".concat(CN.mask.disableInteraction, " ").concat(highlightedMaskClassName),
              highlightedBorder: highlightedBorder
            }), /*#__PURE__*/React__default["default"].createElement(FocusLockCombination, {
              disabled: disableFocusLock,
              autoFocus: false
            }, /*#__PURE__*/React__default["default"].createElement(Guide, {
              ref: this.helper,
              targetHeight: targetHeight,
              targetWidth: targetWidth,
              targetTop: targetTop,
              targetRight: targetRight,
              targetBottom: targetBottom,
              targetLeft: targetLeft,
              windowWidth: windowWidth,
              windowHeight: windowHeight,
              helperWidth: helperWidth,
              helperHeight: helperHeight,
              helperPosition: helperPosition,
              padding: maskSpace,
              tabIndex: -1,
              current: current,
              style: steps[current].style ? steps[current].style : {},
              rounded: rounded,
              className: cn(CN.helper.base, className, _defineProperty({}, CN.helper.isOpen, isOpen)),
              accentColor: accentColor,
              defaultStyles: !CustomHelper,
              role: "dialog"
            }, CustomHelper ? /*#__PURE__*/React__default["default"].createElement(CustomHelper, {
              current: current,
              totalSteps: steps.length,
              gotoStep: this.gotoStep,
              close: onRequestClose,
              content: steps[current] && (typeof steps[current].content === 'function' ? steps[current].content({
                close: onRequestClose,
                goTo: this.gotoStep,
                inDOM: inDOM,
                step: current + 1
              }) : steps[current].content)
            }, this.props.children) : /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.props.children, steps[current] && (typeof steps[current].content === 'function' ? steps[current].content({
              close: onRequestClose,
              goTo: this.gotoStep,
              inDOM: inDOM,
              step: current + 1
            }) : steps[current].content), showNumber && /*#__PURE__*/React__default["default"].createElement(Badge, {
              "data-tour-elem": "badge",
              accentColor: accentColor
            }, typeof badgeContent === 'function' ? badgeContent(current + 1, steps.length) : current + 1), (showButtons || showNavigation) && /*#__PURE__*/React__default["default"].createElement(Controls, {
              "data-tour-elem": "controls"
            }, showButtons && /*#__PURE__*/React__default["default"].createElement(Arrow$1, {
              onClick: typeof prevStep === 'function' ? prevStep : this.prevStep,
              disabled: current === 0,
              label: prevButton ? prevButton : null
            }), showNavigation && /*#__PURE__*/React__default["default"].createElement(Navigation, {
              "data-tour-elem": "navigation"
            }, steps.map(function (s, i) {
              return /*#__PURE__*/React__default["default"].createElement(Dot, {
                key: "".concat(s.selector ? s.selector : 'undef', "_").concat(i),
                onClick: function onClick() {
                  return _this3.gotoStep(i);
                },
                current: current,
                index: i,
                accentColor: accentColor,
                disabled: current === i || disableDotsNavigation,
                showNumber: showNavigationNumber,
                "data-tour-elem": "dot",
                className: cn(CN.dot.base, _defineProperty({}, CN.dot.active, current === i)),
                "aria-label": s.navDotAriaLabel
              });
            })), showButtons && /*#__PURE__*/React__default["default"].createElement(Arrow$1, {
              onClick: current === steps.length - 1 ? lastStepNextButton ? onRequestClose : function () {} : typeof nextStep === 'function' ? nextStep : this.nextStep,
              disabled: !lastStepNextButton && current === steps.length - 1,
              inverted: true,
              label: lastStepNextButton && current === steps.length - 1 ? lastStepNextButton : nextButton ? nextButton : null
            })), showCloseButton && /*#__PURE__*/React__default["default"].createElement(StyledClose, {
              onClick: onRequestClose,
              className: "reactour__close",
              ariaLabel: closeButtonAriaLabel
            })))));
          }
          return null;
        }
      }]);
      return Tour;
    }(React.Component);
    var setNodeState = function setNodeState(node, step, helper) {
      if (!helper) return;
      var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      var _hx$getNodeRect = getNodeRect(helper),
        helperWidth = _hx$getNodeRect.width,
        helperHeight = _hx$getNodeRect.height;
      var attrs = {
        top: h + 10,
        right: w / 2 + 9,
        bottom: h / 2 + 9,
        left: w / 2 - helperWidth / 2,
        width: 0,
        height: 0,
        w: w,
        h: h,
        helperPosition: 'center'
      };
      if (node) {
        attrs = getHighlightedRect(node, step);
      }
      return function update() {
        return _objectSpread2(_objectSpread2({
          w: w,
          h: h,
          helperWidth: helperWidth,
          helperHeight: helperHeight,
          helperPosition: step.position
        }, attrs), {}, {
          inDOM: node ? true : false
        });
      };
    };
    Tour.propTypes = propTypes;
    Tour.defaultProps = defaultProps;

    class ReactTourInput extends React.Component {
        constructor() {
            super(...arguments);
            this.state = { isTourVisible: false };
            this.closeTour = () => {
                this.setState({ isTourVisible: false });
            };
        }
        componentDidMount() {
            this.setState({ isTourVisible: true });
        }
        render() {
            //   let arrayOfObjects: any[] = [];
            //   console.info('Tour visibility::'+this.state.isTourVisible+' '+this.props.startTour);
            //  if(this.state.isTourVisible && this.props.startTour){
            //  console.info('JSON value::'+this.props.joyrideSteps);
            //   arrayOfObjects = JSON.parse(this.props.joyrideSteps);
            //  }
            return (React.createElement(Tour, { steps: this.props.arrayOfObjectsValue, isOpen: (this.state.isTourVisible && this.props.startTour) || false, accentColor: this.props.accentColor, closeWithMask: this.props.closeWithMask, disableDotsNavigation: this.props.disabledotsnavigation, disableKeyboardNavigation: this.props.disablekeyboardnavigation, showButtons: this.props.showButtons, showCloseButton: this.props.showCloseButtons, showNavigation: this.props.showNavigation, showNumber: this.props.showNumber, startAt: this.props.startAt, disableFocusLock: this.props.disableFocusLock, onRequestClose: this.closeTour }));
        }
    }

    class Reacttour extends React.Component {
        render() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            let startTourValue = false;
            let parsedArray = null;
            console.info("steps key:" + this.props.stepsKey.value);
            if (this.props.stepsKey.value != null) {
                startTourValue = true;
                parsedArray = JSON.parse(this.props.stepsKey.value || '');
            }
            let accentColorValue = ((_a = this.props.accentcolorKey) === null || _a === void 0 ? void 0 : _a.value) || '#007aff';
            let closeWithMaskValue = ((_b = this.props.closeWithMaskKey) === null || _b === void 0 ? void 0 : _b.value) || true;
            let disabledotsnavigationValue = ((_c = this.props.disabledotsnavigationKey) === null || _c === void 0 ? void 0 : _c.value) || false;
            let disablekeyboardnavigationValue = ((_d = this.props.disablekeyboardnavigationKey) === null || _d === void 0 ? void 0 : _d.value) || false;
            let showbuttonsValue = ((_e = this.props.showButtonsKey) === null || _e === void 0 ? void 0 : _e.value) || true;
            let showclosebuttonValue = ((_f = this.props.showCloseButtonsKey) === null || _f === void 0 ? void 0 : _f.value) || true;
            let showNavigationValue = ((_g = this.props.showNavigationKey) === null || _g === void 0 ? void 0 : _g.value) || true;
            let showNavigationNumberValue = ((_h = this.props.showNavigationNumberKey) === null || _h === void 0 ? void 0 : _h.value) || true;
            let showNumberValue = ((_j = this.props.showNumberKey) === null || _j === void 0 ? void 0 : _j.value) || true;
            let startAtValue = 0;
            if (((_k = this.props.startAtKey) === null || _k === void 0 ? void 0 : _k.value) != undefined) {
                startAtValue = Number((_l = this.props.startAtKey) === null || _l === void 0 ? void 0 : _l.value);
            }
            let disableFocusLockValue = ((_m = this.props.disableFocusLockKey) === null || _m === void 0 ? void 0 : _m.value) || false;
            return (React.createElement(ReactTourInput, { startTour: startTourValue, arrayOfObjectsValue: parsedArray, accentColor: accentColorValue, closeWithMask: closeWithMaskValue, disabledotsnavigation: disabledotsnavigationValue, disablekeyboardnavigation: disablekeyboardnavigationValue, showButtons: showbuttonsValue, showCloseButtons: showclosebuttonValue, showNavigation: showNavigationValue, showNavigationNumber: showNavigationNumberValue, showNumber: showNumberValue, startAt: startAtValue, disableFocusLock: disableFocusLockValue }));
        }
    }

    exports.Reacttour = Reacttour;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
